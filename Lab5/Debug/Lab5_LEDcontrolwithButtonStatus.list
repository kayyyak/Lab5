
Lab5_LEDcontrolwithButtonStatus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08003c4c  08003c4c  00013c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d68  08003d68  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003d68  08003d68  00013d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d70  08003d70  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d70  08003d70  00013d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d74  08003d74  00013d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000078  08003df0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08003df0  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088fd  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016e2  00000000  00000000  000289a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  0002a088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000668  00000000  00000000  0002a778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015973  00000000  00000000  0002ade0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d22  00000000  00000000  00040753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085e05  00000000  00000000  00049475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf27a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f14  00000000  00000000  000cf2cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003c34 	.word	0x08003c34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08003c34 	.word	0x08003c34

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fd2e 	bl	8000ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f822 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f8dc 	bl	800075c <MX_GPIO_Init>
  MX_DMA_Init();
 80005a4:	f000 f8b2 	bl	800070c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005a8:	f000 f886 	bl	80006b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  UARTDMAConfig();
 80005ac:	f000 f944 	bl	8000838 <UARTDMAConfig>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LEDBlinkTimer();
 80005b0:	f000 fb16 	bl	8000be0 <LEDBlinkTimer>
	  if(d_case == 0)
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <main+0x48>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d102      	bne.n	80005c2 <main+0x2e>
	  {
		  LEDBlinkTimer();
 80005bc:	f000 fb10 	bl	8000be0 <LEDBlinkTimer>
 80005c0:	e008      	b.n	80005d4 <main+0x40>
	  }
	  else if(d_case == 1)
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <main+0x48>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d104      	bne.n	80005d4 <main+0x40>
	  {
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2120      	movs	r1, #32
 80005ce:	4804      	ldr	r0, [pc, #16]	; (80005e0 <main+0x4c>)
 80005d0:	f001 fba2 	bl	8001d18 <HAL_GPIO_WritePin>
	  }
	  B1ButtonStatus();
 80005d4:	f000 fb26 	bl	8000c24 <B1ButtonStatus>
  {
 80005d8:	e7ea      	b.n	80005b0 <main+0x1c>
 80005da:	bf00      	nop
 80005dc:	200001f0 	.word	0x200001f0
 80005e0:	40020000 	.word	0x40020000

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 fea8 	bl	8003348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <SystemClock_Config+0xcc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a27      	ldr	r2, [pc, #156]	; (80006b0 <SystemClock_Config+0xcc>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <SystemClock_Config+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a21      	ldr	r2, [pc, #132]	; (80006b4 <SystemClock_Config+0xd0>)
 800062e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000648:	2310      	movs	r3, #16
 800064a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000650:	2300      	movs	r3, #0
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000654:	2310      	movs	r3, #16
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000658:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800065c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800065e:	2304      	movs	r3, #4
 8000660:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000662:	2304      	movs	r3, #4
 8000664:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fb88 	bl	8001d80 <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000676:	f000 fb33 	bl	8000ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2302      	movs	r3, #2
 8000680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2102      	movs	r1, #2
 8000696:	4618      	mov	r0, r3
 8000698:	f001 fdea 	bl	8002270 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006a2:	f000 fb1d 	bl	8000ce0 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	; 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006bc:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_USART2_UART_Init+0x48>)
 80006be:	4a11      	ldr	r2, [pc, #68]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_USART2_UART_Init+0x48>)
 80006c4:	4a10      	ldr	r2, [pc, #64]	; (8000708 <MX_USART2_UART_Init+0x50>)
 80006c6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <MX_USART2_UART_Init+0x48>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_USART2_UART_Init+0x48>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <MX_USART2_UART_Init+0x48>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_USART2_UART_Init+0x48>)
 80006dc:	220c      	movs	r2, #12
 80006de:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <MX_USART2_UART_Init+0x48>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_USART2_UART_Init+0x48>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_USART2_UART_Init+0x48>)
 80006ee:	f001 ffdf 	bl	80026b0 <HAL_UART_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 80006f8:	f000 faf2 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000094 	.word	0x20000094
 8000704:	40004400 	.word	0x40004400
 8000708:	0007a120 	.word	0x0007a120

0800070c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_DMA_Init+0x4c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a0f      	ldr	r2, [pc, #60]	; (8000758 <MX_DMA_Init+0x4c>)
 800071c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <MX_DMA_Init+0x4c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	2010      	movs	r0, #16
 8000734:	f000 fdad 	bl	8001292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000738:	2010      	movs	r0, #16
 800073a:	f000 fdc6 	bl	80012ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	2011      	movs	r0, #17
 8000744:	f000 fda5 	bl	8001292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000748:	2011      	movs	r0, #17
 800074a:	f000 fdbe 	bl	80012ca <HAL_NVIC_EnableIRQ>

}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b2d      	ldr	r3, [pc, #180]	; (800082c <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a2c      	ldr	r2, [pc, #176]	; (800082c <MX_GPIO_Init+0xd0>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b2a      	ldr	r3, [pc, #168]	; (800082c <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b26      	ldr	r3, [pc, #152]	; (800082c <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a25      	ldr	r2, [pc, #148]	; (800082c <MX_GPIO_Init+0xd0>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b23      	ldr	r3, [pc, #140]	; (800082c <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b1f      	ldr	r3, [pc, #124]	; (800082c <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a1e      	ldr	r2, [pc, #120]	; (800082c <MX_GPIO_Init+0xd0>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b1c      	ldr	r3, [pc, #112]	; (800082c <MX_GPIO_Init+0xd0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_GPIO_Init+0xd0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a17      	ldr	r2, [pc, #92]	; (800082c <MX_GPIO_Init+0xd0>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2120      	movs	r1, #32
 80007e6:	4812      	ldr	r0, [pc, #72]	; (8000830 <MX_GPIO_Init+0xd4>)
 80007e8:	f001 fa96 	bl	8001d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	480c      	ldr	r0, [pc, #48]	; (8000834 <MX_GPIO_Init+0xd8>)
 8000804:	f001 f8ec 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000808:	2320      	movs	r3, #32
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_GPIO_Init+0xd4>)
 8000820:	f001 f8de 	bl	80019e0 <HAL_GPIO_Init>

}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40020000 	.word	0x40020000
 8000834:	40020800 	.word	0x40020800

08000838 <UARTDMAConfig>:

/* USER CODE BEGIN 4 */
void UARTDMAConfig()
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, RxBuffer, 1);
 800083c:	2201      	movs	r2, #1
 800083e:	4903      	ldr	r1, [pc, #12]	; (800084c <UARTDMAConfig+0x14>)
 8000840:	4803      	ldr	r0, [pc, #12]	; (8000850 <UARTDMAConfig+0x18>)
 8000842:	f002 f801 	bl	8002848 <HAL_UART_Receive_DMA>
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000198 	.word	0x20000198
 8000850:	20000094 	.word	0x20000094

08000854 <HAL_UART_RxCpltCallback>:
//-------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4aa6      	ldr	r2, [pc, #664]	; (8000af8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000860:	4293      	cmp	r3, r2
 8000862:	f040 81a3 	bne.w	8000bac <HAL_UART_RxCpltCallback+0x358>
	{
		switch(Menu)
 8000866:	4ba5      	ldr	r3, [pc, #660]	; (8000afc <HAL_UART_RxCpltCallback+0x2a8>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b03      	cmp	r3, #3
 800086c:	f000 8164 	beq.w	8000b38 <HAL_UART_RxCpltCallback+0x2e4>
 8000870:	2b03      	cmp	r3, #3
 8000872:	f300 8183 	bgt.w	8000b7c <HAL_UART_RxCpltCallback+0x328>
 8000876:	2b00      	cmp	r3, #0
 8000878:	d003      	beq.n	8000882 <HAL_UART_RxCpltCallback+0x2e>
 800087a:	2b01      	cmp	r3, #1
 800087c:	f000 810f 	beq.w	8000a9e <HAL_UART_RxCpltCallback+0x24a>
 8000880:	e17c      	b.n	8000b7c <HAL_UART_RxCpltCallback+0x328>
		{
		case 0 :
			memset(UARTDMAConfig, 0, sizeof(TxBuffer));
 8000882:	223c      	movs	r2, #60	; 0x3c
 8000884:	2100      	movs	r1, #0
 8000886:	489e      	ldr	r0, [pc, #632]	; (8000b00 <HAL_UART_RxCpltCallback+0x2ac>)
 8000888:	f002 fd5e 	bl	8003348 <memset>
			RxBuffer[1] = '\0';
 800088c:	4b9d      	ldr	r3, [pc, #628]	; (8000b04 <HAL_UART_RxCpltCallback+0x2b0>)
 800088e:	2200      	movs	r2, #0
 8000890:	705a      	strb	r2, [r3, #1]
			LEDcontrol = RxBuffer[0];
 8000892:	4b9c      	ldr	r3, [pc, #624]	; (8000b04 <HAL_UART_RxCpltCallback+0x2b0>)
 8000894:	781a      	ldrb	r2, [r3, #0]
 8000896:	4b9c      	ldr	r3, [pc, #624]	; (8000b08 <HAL_UART_RxCpltCallback+0x2b4>)
 8000898:	701a      	strb	r2, [r3, #0]
			switch(LEDcontrol)
 800089a:	4b9b      	ldr	r3, [pc, #620]	; (8000b08 <HAL_UART_RxCpltCallback+0x2b4>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	3b61      	subs	r3, #97	; 0x61
 80008a0:	2b17      	cmp	r3, #23
 80008a2:	f200 8185 	bhi.w	8000bb0 <HAL_UART_RxCpltCallback+0x35c>
 80008a6:	a201      	add	r2, pc, #4	; (adr r2, 80008ac <HAL_UART_RxCpltCallback+0x58>)
 80008a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ac:	0800090d 	.word	0x0800090d
 80008b0:	08000bb1 	.word	0x08000bb1
 80008b4:	08000bb1 	.word	0x08000bb1
 80008b8:	080009db 	.word	0x080009db
 80008bc:	08000bb1 	.word	0x08000bb1
 80008c0:	08000bb1 	.word	0x08000bb1
 80008c4:	08000bb1 	.word	0x08000bb1
 80008c8:	08000bb1 	.word	0x08000bb1
 80008cc:	08000bb1 	.word	0x08000bb1
 80008d0:	08000bb1 	.word	0x08000bb1
 80008d4:	08000bb1 	.word	0x08000bb1
 80008d8:	08000bb1 	.word	0x08000bb1
 80008dc:	08000bb1 	.word	0x08000bb1
 80008e0:	08000bb1 	.word	0x08000bb1
 80008e4:	08000bb1 	.word	0x08000bb1
 80008e8:	08000bb1 	.word	0x08000bb1
 80008ec:	08000bb1 	.word	0x08000bb1
 80008f0:	08000bb1 	.word	0x08000bb1
 80008f4:	08000977 	.word	0x08000977
 80008f8:	08000bb1 	.word	0x08000bb1
 80008fc:	08000bb1 	.word	0x08000bb1
 8000900:	08000bb1 	.word	0x08000bb1
 8000904:	08000bb1 	.word	0x08000bb1
 8000908:	08000a65 	.word	0x08000a65
			{
			case 'a' :
				memset(UARTDMAConfig, 0, sizeof(TxBuffer));
 800090c:	223c      	movs	r2, #60	; 0x3c
 800090e:	2100      	movs	r1, #0
 8000910:	487b      	ldr	r0, [pc, #492]	; (8000b00 <HAL_UART_RxCpltCallback+0x2ac>)
 8000912:	f002 fd19 	bl	8003348 <memset>
				frequency += 1;
 8000916:	4b7d      	ldr	r3, [pc, #500]	; (8000b0c <HAL_UART_RxCpltCallback+0x2b8>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3301      	adds	r3, #1
 800091c:	4a7b      	ldr	r2, [pc, #492]	; (8000b0c <HAL_UART_RxCpltCallback+0x2b8>)
 800091e:	6013      	str	r3, [r2, #0]

				a += 1;
 8000920:	4b7b      	ldr	r3, [pc, #492]	; (8000b10 <HAL_UART_RxCpltCallback+0x2bc>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	4a7a      	ldr	r2, [pc, #488]	; (8000b10 <HAL_UART_RxCpltCallback+0x2bc>)
 8000928:	6013      	str	r3, [r2, #0]
				if(a == 1)
 800092a:	4b79      	ldr	r3, [pc, #484]	; (8000b10 <HAL_UART_RxCpltCallback+0x2bc>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d103      	bne.n	800093a <HAL_UART_RxCpltCallback+0xe6>
				{
					hz = 2;
 8000932:	4b78      	ldr	r3, [pc, #480]	; (8000b14 <HAL_UART_RxCpltCallback+0x2c0>)
 8000934:	2202      	movs	r2, #2
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	e008      	b.n	800094c <HAL_UART_RxCpltCallback+0xf8>
				}
				else if(a > 1)
 800093a:	4b75      	ldr	r3, [pc, #468]	; (8000b10 <HAL_UART_RxCpltCallback+0x2bc>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b01      	cmp	r3, #1
 8000940:	dd04      	ble.n	800094c <HAL_UART_RxCpltCallback+0xf8>
				{
					hz += 1;
 8000942:	4b74      	ldr	r3, [pc, #464]	; (8000b14 <HAL_UART_RxCpltCallback+0x2c0>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	3301      	adds	r3, #1
 8000948:	4a72      	ldr	r2, [pc, #456]	; (8000b14 <HAL_UART_RxCpltCallback+0x2c0>)
 800094a:	6013      	str	r3, [r2, #0]
				}
				RxBuffer[1] = '\0';
 800094c:	4b6d      	ldr	r3, [pc, #436]	; (8000b04 <HAL_UART_RxCpltCallback+0x2b0>)
 800094e:	2200      	movs	r2, #0
 8000950:	705a      	strb	r2, [r3, #1]
				sprintf((char*)TxBuffer, "frequency(Hz) = %d\r\n",hz);
 8000952:	4b70      	ldr	r3, [pc, #448]	; (8000b14 <HAL_UART_RxCpltCallback+0x2c0>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	461a      	mov	r2, r3
 8000958:	496f      	ldr	r1, [pc, #444]	; (8000b18 <HAL_UART_RxCpltCallback+0x2c4>)
 800095a:	4870      	ldr	r0, [pc, #448]	; (8000b1c <HAL_UART_RxCpltCallback+0x2c8>)
 800095c:	f002 fcfc 	bl	8003358 <siprintf>
				HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000960:	486e      	ldr	r0, [pc, #440]	; (8000b1c <HAL_UART_RxCpltCallback+0x2c8>)
 8000962:	f7ff fc3d 	bl	80001e0 <strlen>
 8000966:	4603      	mov	r3, r0
 8000968:	b29b      	uxth	r3, r3
 800096a:	461a      	mov	r2, r3
 800096c:	496b      	ldr	r1, [pc, #428]	; (8000b1c <HAL_UART_RxCpltCallback+0x2c8>)
 800096e:	4862      	ldr	r0, [pc, #392]	; (8000af8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000970:	f001 feec 	bl	800274c <HAL_UART_Transmit_DMA>
				break;
 8000974:	e092      	b.n	8000a9c <HAL_UART_RxCpltCallback+0x248>
			case 's' :
				memset(UARTDMAConfig, 0, sizeof(TxBuffer));
 8000976:	223c      	movs	r2, #60	; 0x3c
 8000978:	2100      	movs	r1, #0
 800097a:	4861      	ldr	r0, [pc, #388]	; (8000b00 <HAL_UART_RxCpltCallback+0x2ac>)
 800097c:	f002 fce4 	bl	8003348 <memset>
				frequency -= 1;
 8000980:	4b62      	ldr	r3, [pc, #392]	; (8000b0c <HAL_UART_RxCpltCallback+0x2b8>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	3b01      	subs	r3, #1
 8000986:	4a61      	ldr	r2, [pc, #388]	; (8000b0c <HAL_UART_RxCpltCallback+0x2b8>)
 8000988:	6013      	str	r3, [r2, #0]
				if(frequency < 0)
 800098a:	4b60      	ldr	r3, [pc, #384]	; (8000b0c <HAL_UART_RxCpltCallback+0x2b8>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	da02      	bge.n	8000998 <HAL_UART_RxCpltCallback+0x144>
				{
					frequency = 0;
 8000992:	4b5e      	ldr	r3, [pc, #376]	; (8000b0c <HAL_UART_RxCpltCallback+0x2b8>)
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
				}
				hz -= 1;
 8000998:	4b5e      	ldr	r3, [pc, #376]	; (8000b14 <HAL_UART_RxCpltCallback+0x2c0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	3b01      	subs	r3, #1
 800099e:	4a5d      	ldr	r2, [pc, #372]	; (8000b14 <HAL_UART_RxCpltCallback+0x2c0>)
 80009a0:	6013      	str	r3, [r2, #0]
				if(hz < 0)
 80009a2:	4b5c      	ldr	r3, [pc, #368]	; (8000b14 <HAL_UART_RxCpltCallback+0x2c0>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	da02      	bge.n	80009b0 <HAL_UART_RxCpltCallback+0x15c>
				{
					hz = 0;
 80009aa:	4b5a      	ldr	r3, [pc, #360]	; (8000b14 <HAL_UART_RxCpltCallback+0x2c0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
				}
				RxBuffer[1] = '\0';
 80009b0:	4b54      	ldr	r3, [pc, #336]	; (8000b04 <HAL_UART_RxCpltCallback+0x2b0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	705a      	strb	r2, [r3, #1]
				sprintf((char*)TxBuffer, "frequency(Hz) = %d\r\n",hz);
 80009b6:	4b57      	ldr	r3, [pc, #348]	; (8000b14 <HAL_UART_RxCpltCallback+0x2c0>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	461a      	mov	r2, r3
 80009bc:	4956      	ldr	r1, [pc, #344]	; (8000b18 <HAL_UART_RxCpltCallback+0x2c4>)
 80009be:	4857      	ldr	r0, [pc, #348]	; (8000b1c <HAL_UART_RxCpltCallback+0x2c8>)
 80009c0:	f002 fcca 	bl	8003358 <siprintf>
				HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 80009c4:	4855      	ldr	r0, [pc, #340]	; (8000b1c <HAL_UART_RxCpltCallback+0x2c8>)
 80009c6:	f7ff fc0b 	bl	80001e0 <strlen>
 80009ca:	4603      	mov	r3, r0
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	461a      	mov	r2, r3
 80009d0:	4952      	ldr	r1, [pc, #328]	; (8000b1c <HAL_UART_RxCpltCallback+0x2c8>)
 80009d2:	4849      	ldr	r0, [pc, #292]	; (8000af8 <HAL_UART_RxCpltCallback+0x2a4>)
 80009d4:	f001 feba 	bl	800274c <HAL_UART_Transmit_DMA>
				break;
 80009d8:	e060      	b.n	8000a9c <HAL_UART_RxCpltCallback+0x248>
			case 'd' :
				memset(UARTDMAConfig, 0, sizeof(TxBuffer));
 80009da:	223c      	movs	r2, #60	; 0x3c
 80009dc:	2100      	movs	r1, #0
 80009de:	4848      	ldr	r0, [pc, #288]	; (8000b00 <HAL_UART_RxCpltCallback+0x2ac>)
 80009e0:	f002 fcb2 	bl	8003348 <memset>
				count += 1;
 80009e4:	4b4e      	ldr	r3, [pc, #312]	; (8000b20 <HAL_UART_RxCpltCallback+0x2cc>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	3301      	adds	r3, #1
 80009ea:	4a4d      	ldr	r2, [pc, #308]	; (8000b20 <HAL_UART_RxCpltCallback+0x2cc>)
 80009ec:	6013      	str	r3, [r2, #0]
				if(count%2 == 0)
 80009ee:	4b4c      	ldr	r3, [pc, #304]	; (8000b20 <HAL_UART_RxCpltCallback+0x2cc>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d115      	bne.n	8000a26 <HAL_UART_RxCpltCallback+0x1d2>
				{
					d_case = 0;
 80009fa:	4b4a      	ldr	r3, [pc, #296]	; (8000b24 <HAL_UART_RxCpltCallback+0x2d0>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
					RxBuffer[1] = '\0';
 8000a00:	4b40      	ldr	r3, [pc, #256]	; (8000b04 <HAL_UART_RxCpltCallback+0x2b0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	705a      	strb	r2, [r3, #1]
					sprintf((char*)TxBuffer, "LED is ON %s\r\n",RxBuffer);
 8000a06:	4a3f      	ldr	r2, [pc, #252]	; (8000b04 <HAL_UART_RxCpltCallback+0x2b0>)
 8000a08:	4947      	ldr	r1, [pc, #284]	; (8000b28 <HAL_UART_RxCpltCallback+0x2d4>)
 8000a0a:	4844      	ldr	r0, [pc, #272]	; (8000b1c <HAL_UART_RxCpltCallback+0x2c8>)
 8000a0c:	f002 fca4 	bl	8003358 <siprintf>
					HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000a10:	4842      	ldr	r0, [pc, #264]	; (8000b1c <HAL_UART_RxCpltCallback+0x2c8>)
 8000a12:	f7ff fbe5 	bl	80001e0 <strlen>
 8000a16:	4603      	mov	r3, r0
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	493f      	ldr	r1, [pc, #252]	; (8000b1c <HAL_UART_RxCpltCallback+0x2c8>)
 8000a1e:	4836      	ldr	r0, [pc, #216]	; (8000af8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000a20:	f001 fe94 	bl	800274c <HAL_UART_Transmit_DMA>
					d_case = 1;
					RxBuffer[1] = '\0';
					sprintf((char*)TxBuffer, "LED is OFF %s\r\n",RxBuffer);
					HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
				}
				break;
 8000a24:	e039      	b.n	8000a9a <HAL_UART_RxCpltCallback+0x246>
				else if(count%2 == 1)
 8000a26:	4b3e      	ldr	r3, [pc, #248]	; (8000b20 <HAL_UART_RxCpltCallback+0x2cc>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	bfb8      	it	lt
 8000a32:	425b      	neglt	r3, r3
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d130      	bne.n	8000a9a <HAL_UART_RxCpltCallback+0x246>
					d_case = 1;
 8000a38:	4b3a      	ldr	r3, [pc, #232]	; (8000b24 <HAL_UART_RxCpltCallback+0x2d0>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	601a      	str	r2, [r3, #0]
					RxBuffer[1] = '\0';
 8000a3e:	4b31      	ldr	r3, [pc, #196]	; (8000b04 <HAL_UART_RxCpltCallback+0x2b0>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	705a      	strb	r2, [r3, #1]
					sprintf((char*)TxBuffer, "LED is OFF %s\r\n",RxBuffer);
 8000a44:	4a2f      	ldr	r2, [pc, #188]	; (8000b04 <HAL_UART_RxCpltCallback+0x2b0>)
 8000a46:	4939      	ldr	r1, [pc, #228]	; (8000b2c <HAL_UART_RxCpltCallback+0x2d8>)
 8000a48:	4834      	ldr	r0, [pc, #208]	; (8000b1c <HAL_UART_RxCpltCallback+0x2c8>)
 8000a4a:	f002 fc85 	bl	8003358 <siprintf>
					HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000a4e:	4833      	ldr	r0, [pc, #204]	; (8000b1c <HAL_UART_RxCpltCallback+0x2c8>)
 8000a50:	f7ff fbc6 	bl	80001e0 <strlen>
 8000a54:	4603      	mov	r3, r0
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4930      	ldr	r1, [pc, #192]	; (8000b1c <HAL_UART_RxCpltCallback+0x2c8>)
 8000a5c:	4826      	ldr	r0, [pc, #152]	; (8000af8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000a5e:	f001 fe75 	bl	800274c <HAL_UART_Transmit_DMA>
				break;
 8000a62:	e01a      	b.n	8000a9a <HAL_UART_RxCpltCallback+0x246>
			case 'x' :
				memset(UARTDMAConfig, 0, sizeof(TxBuffer));
 8000a64:	223c      	movs	r2, #60	; 0x3c
 8000a66:	2100      	movs	r1, #0
 8000a68:	4825      	ldr	r0, [pc, #148]	; (8000b00 <HAL_UART_RxCpltCallback+0x2ac>)
 8000a6a:	f002 fc6d 	bl	8003348 <memset>
				RxBuffer[1] = '\0';
 8000a6e:	4b25      	ldr	r3, [pc, #148]	; (8000b04 <HAL_UART_RxCpltCallback+0x2b0>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	705a      	strb	r2, [r3, #1]
				sprintf((char*)TxBuffer, "Back to menu, Please Select 0 or 1 %s\r\n",RxBuffer);
 8000a74:	4a23      	ldr	r2, [pc, #140]	; (8000b04 <HAL_UART_RxCpltCallback+0x2b0>)
 8000a76:	492e      	ldr	r1, [pc, #184]	; (8000b30 <HAL_UART_RxCpltCallback+0x2dc>)
 8000a78:	4828      	ldr	r0, [pc, #160]	; (8000b1c <HAL_UART_RxCpltCallback+0x2c8>)
 8000a7a:	f002 fc6d 	bl	8003358 <siprintf>
				HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000a7e:	4827      	ldr	r0, [pc, #156]	; (8000b1c <HAL_UART_RxCpltCallback+0x2c8>)
 8000a80:	f7ff fbae 	bl	80001e0 <strlen>
 8000a84:	4603      	mov	r3, r0
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4924      	ldr	r1, [pc, #144]	; (8000b1c <HAL_UART_RxCpltCallback+0x2c8>)
 8000a8c:	481a      	ldr	r0, [pc, #104]	; (8000af8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000a8e:	f001 fe5d 	bl	800274c <HAL_UART_Transmit_DMA>
				Menu = 3;
 8000a92:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <HAL_UART_RxCpltCallback+0x2a8>)
 8000a94:	2203      	movs	r2, #3
 8000a96:	701a      	strb	r2, [r3, #0]
				break;
 8000a98:	e000      	b.n	8000a9c <HAL_UART_RxCpltCallback+0x248>
				break;
 8000a9a:	bf00      	nop
			}
			break;
 8000a9c:	e088      	b.n	8000bb0 <HAL_UART_RxCpltCallback+0x35c>
		case 1 :
			memset(UARTDMAConfig, 0, sizeof(TxBuffer));
 8000a9e:	223c      	movs	r2, #60	; 0x3c
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4817      	ldr	r0, [pc, #92]	; (8000b00 <HAL_UART_RxCpltCallback+0x2ac>)
 8000aa4:	f002 fc50 	bl	8003348 <memset>
			RxBuffer[1] = '\0';
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <HAL_UART_RxCpltCallback+0x2b0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	705a      	strb	r2, [r3, #1]
			ButtonStatus = RxBuffer[0];
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <HAL_UART_RxCpltCallback+0x2b0>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <HAL_UART_RxCpltCallback+0x2e0>)
 8000ab6:	601a      	str	r2, [r3, #0]
			switch(ButtonStatus)
 8000ab8:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <HAL_UART_RxCpltCallback+0x2e0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b78      	cmp	r3, #120	; 0x78
 8000abe:	d179      	bne.n	8000bb4 <HAL_UART_RxCpltCallback+0x360>
			{
			case 'x' :
				memset(UARTDMAConfig, 0, sizeof(TxBuffer));
 8000ac0:	223c      	movs	r2, #60	; 0x3c
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	480e      	ldr	r0, [pc, #56]	; (8000b00 <HAL_UART_RxCpltCallback+0x2ac>)
 8000ac6:	f002 fc3f 	bl	8003348 <memset>
				RxBuffer[1] = '\0';
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <HAL_UART_RxCpltCallback+0x2b0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	705a      	strb	r2, [r3, #1]
				sprintf((char*)TxBuffer, "Back to menu, Please Select 0 or 1 %s\r\n",RxBuffer);
 8000ad0:	4a0c      	ldr	r2, [pc, #48]	; (8000b04 <HAL_UART_RxCpltCallback+0x2b0>)
 8000ad2:	4917      	ldr	r1, [pc, #92]	; (8000b30 <HAL_UART_RxCpltCallback+0x2dc>)
 8000ad4:	4811      	ldr	r0, [pc, #68]	; (8000b1c <HAL_UART_RxCpltCallback+0x2c8>)
 8000ad6:	f002 fc3f 	bl	8003358 <siprintf>
				HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000ada:	4810      	ldr	r0, [pc, #64]	; (8000b1c <HAL_UART_RxCpltCallback+0x2c8>)
 8000adc:	f7ff fb80 	bl	80001e0 <strlen>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	490d      	ldr	r1, [pc, #52]	; (8000b1c <HAL_UART_RxCpltCallback+0x2c8>)
 8000ae8:	4803      	ldr	r0, [pc, #12]	; (8000af8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000aea:	f001 fe2f 	bl	800274c <HAL_UART_Transmit_DMA>
				Menu = 3;
 8000aee:	4b03      	ldr	r3, [pc, #12]	; (8000afc <HAL_UART_RxCpltCallback+0x2a8>)
 8000af0:	2203      	movs	r2, #3
 8000af2:	701a      	strb	r2, [r3, #0]
				break;
 8000af4:	bf00      	nop
			}
			break;
 8000af6:	e05d      	b.n	8000bb4 <HAL_UART_RxCpltCallback+0x360>
 8000af8:	20000094 	.word	0x20000094
 8000afc:	20000000 	.word	0x20000000
 8000b00:	08000839 	.word	0x08000839
 8000b04:	20000198 	.word	0x20000198
 8000b08:	200001e0 	.word	0x200001e0
 8000b0c:	20000004 	.word	0x20000004
 8000b10:	200001f8 	.word	0x200001f8
 8000b14:	200001f4 	.word	0x200001f4
 8000b18:	08003c4c 	.word	0x08003c4c
 8000b1c:	2000019c 	.word	0x2000019c
 8000b20:	200001d8 	.word	0x200001d8
 8000b24:	200001f0 	.word	0x200001f0
 8000b28:	08003c64 	.word	0x08003c64
 8000b2c:	08003c74 	.word	0x08003c74
 8000b30:	08003c84 	.word	0x08003c84
 8000b34:	200001ec 	.word	0x200001ec
		case 3 :
			RxBuffer[1] = '\0';
 8000b38:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <HAL_UART_RxCpltCallback+0x370>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	705a      	strb	r2, [r3, #1]
			if(RxBuffer[0] == '0')
 8000b3e:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <HAL_UART_RxCpltCallback+0x370>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b30      	cmp	r3, #48	; 0x30
 8000b44:	d112      	bne.n	8000b6c <HAL_UART_RxCpltCallback+0x318>
			{
				Menu = 0;
 8000b46:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <HAL_UART_RxCpltCallback+0x374>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	701a      	strb	r2, [r3, #0]
				sprintf((char*)TxBuffer, "frequency(Hz) = 1 %s\r\n",RxBuffer);
 8000b4c:	4a1d      	ldr	r2, [pc, #116]	; (8000bc4 <HAL_UART_RxCpltCallback+0x370>)
 8000b4e:	491f      	ldr	r1, [pc, #124]	; (8000bcc <HAL_UART_RxCpltCallback+0x378>)
 8000b50:	481f      	ldr	r0, [pc, #124]	; (8000bd0 <HAL_UART_RxCpltCallback+0x37c>)
 8000b52:	f002 fc01 	bl	8003358 <siprintf>
				HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000b56:	481e      	ldr	r0, [pc, #120]	; (8000bd0 <HAL_UART_RxCpltCallback+0x37c>)
 8000b58:	f7ff fb42 	bl	80001e0 <strlen>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	461a      	mov	r2, r3
 8000b62:	491b      	ldr	r1, [pc, #108]	; (8000bd0 <HAL_UART_RxCpltCallback+0x37c>)
 8000b64:	481b      	ldr	r0, [pc, #108]	; (8000bd4 <HAL_UART_RxCpltCallback+0x380>)
 8000b66:	f001 fdf1 	bl	800274c <HAL_UART_Transmit_DMA>
			else if(RxBuffer[0] == '1')
			{
				Menu = 1;
			}

			break;
 8000b6a:	e025      	b.n	8000bb8 <HAL_UART_RxCpltCallback+0x364>
			else if(RxBuffer[0] == '1')
 8000b6c:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_UART_RxCpltCallback+0x370>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b31      	cmp	r3, #49	; 0x31
 8000b72:	d121      	bne.n	8000bb8 <HAL_UART_RxCpltCallback+0x364>
				Menu = 1;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <HAL_UART_RxCpltCallback+0x374>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	701a      	strb	r2, [r3, #0]
			break;
 8000b7a:	e01d      	b.n	8000bb8 <HAL_UART_RxCpltCallback+0x364>
		default :
			memset(UARTDMAConfig, 0, sizeof(TxBuffer));
 8000b7c:	223c      	movs	r2, #60	; 0x3c
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4815      	ldr	r0, [pc, #84]	; (8000bd8 <HAL_UART_RxCpltCallback+0x384>)
 8000b82:	f002 fbe1 	bl	8003348 <memset>
			RxBuffer[1] = '\0';
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <HAL_UART_RxCpltCallback+0x370>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	705a      	strb	r2, [r3, #1]
			sprintf((char*)TxBuffer, "Out of range, Please Select 0 or 1 %s\r\n",RxBuffer);
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	; (8000bc4 <HAL_UART_RxCpltCallback+0x370>)
 8000b8e:	4913      	ldr	r1, [pc, #76]	; (8000bdc <HAL_UART_RxCpltCallback+0x388>)
 8000b90:	480f      	ldr	r0, [pc, #60]	; (8000bd0 <HAL_UART_RxCpltCallback+0x37c>)
 8000b92:	f002 fbe1 	bl	8003358 <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000b96:	480e      	ldr	r0, [pc, #56]	; (8000bd0 <HAL_UART_RxCpltCallback+0x37c>)
 8000b98:	f7ff fb22 	bl	80001e0 <strlen>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	490b      	ldr	r1, [pc, #44]	; (8000bd0 <HAL_UART_RxCpltCallback+0x37c>)
 8000ba4:	480b      	ldr	r0, [pc, #44]	; (8000bd4 <HAL_UART_RxCpltCallback+0x380>)
 8000ba6:	f001 fdd1 	bl	800274c <HAL_UART_Transmit_DMA>
			break;
 8000baa:	e006      	b.n	8000bba <HAL_UART_RxCpltCallback+0x366>
		}
	}
 8000bac:	bf00      	nop
 8000bae:	e004      	b.n	8000bba <HAL_UART_RxCpltCallback+0x366>
			break;
 8000bb0:	bf00      	nop
 8000bb2:	e002      	b.n	8000bba <HAL_UART_RxCpltCallback+0x366>
			break;
 8000bb4:	bf00      	nop
 8000bb6:	e000      	b.n	8000bba <HAL_UART_RxCpltCallback+0x366>
			break;
 8000bb8:	bf00      	nop
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000198 	.word	0x20000198
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	08003cac 	.word	0x08003cac
 8000bd0:	2000019c 	.word	0x2000019c
 8000bd4:	20000094 	.word	0x20000094
 8000bd8:	08000839 	.word	0x08000839
 8000bdc:	08003cc4 	.word	0x08003cc4

08000be0 <LEDBlinkTimer>:
//-------------------------------------------------------------------------------------
void LEDBlinkTimer()
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
//	  static uint32_t timestamp = 0;
//	(2/(1000*frequency)
//	(1000/(2*frequency)

	  if(HAL_GetTick() >= timestamp)
 8000be4:	f000 fa6e 	bl	80010c4 <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <LEDBlinkTimer+0x38>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d310      	bcc.n	8000c14 <LEDBlinkTimer+0x34>
	  {
		  timestamp = HAL_GetTick() + (1000/(2*frequency));
 8000bf2:	f000 fa67 	bl	80010c4 <HAL_GetTick>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <LEDBlinkTimer+0x3c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c02:	fb91 f3f3 	sdiv	r3, r1, r3
 8000c06:	4413      	add	r3, r2
 8000c08:	4a03      	ldr	r2, [pc, #12]	; (8000c18 <LEDBlinkTimer+0x38>)
 8000c0a:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000c0c:	2120      	movs	r1, #32
 8000c0e:	4804      	ldr	r0, [pc, #16]	; (8000c20 <LEDBlinkTimer+0x40>)
 8000c10:	f001 f89b 	bl	8001d4a <HAL_GPIO_TogglePin>
	  }
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200001dc 	.word	0x200001dc
 8000c1c:	20000004 	.word	0x20000004
 8000c20:	40020000 	.word	0x40020000

08000c24 <B1ButtonStatus>:
//-------------------------------------------------------------------------------------
void B1ButtonStatus()
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	current = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000c28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2c:	4822      	ldr	r0, [pc, #136]	; (8000cb8 <B1ButtonStatus+0x94>)
 8000c2e:	f001 f85b 	bl	8001ce8 <HAL_GPIO_ReadPin>
 8000c32:	4603      	mov	r3, r0
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <B1ButtonStatus+0x98>)
 8000c38:	601a      	str	r2, [r3, #0]

	if(Menu == 1)
 8000c3a:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <B1ButtonStatus+0x9c>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d137      	bne.n	8000cb2 <B1ButtonStatus+0x8e>
	{
		memset(UARTDMAConfig, 0, sizeof(TxBuffer));
 8000c42:	223c      	movs	r2, #60	; 0x3c
 8000c44:	2100      	movs	r1, #0
 8000c46:	481f      	ldr	r0, [pc, #124]	; (8000cc4 <B1ButtonStatus+0xa0>)
 8000c48:	f002 fb7e 	bl	8003348 <memset>
		if(before == 1 && current == 0)
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <B1ButtonStatus+0xa4>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d113      	bne.n	8000c7c <B1ButtonStatus+0x58>
 8000c54:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <B1ButtonStatus+0x98>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d10f      	bne.n	8000c7c <B1ButtonStatus+0x58>
		{
			sprintf((char*)TxBuffer, "B1 is Press %s\r\n",RxBuffer);
 8000c5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ccc <B1ButtonStatus+0xa8>)
 8000c5e:	491c      	ldr	r1, [pc, #112]	; (8000cd0 <B1ButtonStatus+0xac>)
 8000c60:	481c      	ldr	r0, [pc, #112]	; (8000cd4 <B1ButtonStatus+0xb0>)
 8000c62:	f002 fb79 	bl	8003358 <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000c66:	481b      	ldr	r0, [pc, #108]	; (8000cd4 <B1ButtonStatus+0xb0>)
 8000c68:	f7ff faba 	bl	80001e0 <strlen>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	461a      	mov	r2, r3
 8000c72:	4918      	ldr	r1, [pc, #96]	; (8000cd4 <B1ButtonStatus+0xb0>)
 8000c74:	4818      	ldr	r0, [pc, #96]	; (8000cd8 <B1ButtonStatus+0xb4>)
 8000c76:	f001 fd69 	bl	800274c <HAL_UART_Transmit_DMA>
 8000c7a:	e016      	b.n	8000caa <B1ButtonStatus+0x86>
		}
		else if(before == 0 && current == 1)
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <B1ButtonStatus+0xa4>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d112      	bne.n	8000caa <B1ButtonStatus+0x86>
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <B1ButtonStatus+0x98>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d10e      	bne.n	8000caa <B1ButtonStatus+0x86>
		{
			sprintf((char*)TxBuffer, "B1 is UnPress %s\r\n",RxBuffer);
 8000c8c:	4a0f      	ldr	r2, [pc, #60]	; (8000ccc <B1ButtonStatus+0xa8>)
 8000c8e:	4913      	ldr	r1, [pc, #76]	; (8000cdc <B1ButtonStatus+0xb8>)
 8000c90:	4810      	ldr	r0, [pc, #64]	; (8000cd4 <B1ButtonStatus+0xb0>)
 8000c92:	f002 fb61 	bl	8003358 <siprintf>
			HAL_UART_Transmit_DMA(&huart2, TxBuffer, strlen((char*)TxBuffer));
 8000c96:	480f      	ldr	r0, [pc, #60]	; (8000cd4 <B1ButtonStatus+0xb0>)
 8000c98:	f7ff faa2 	bl	80001e0 <strlen>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	490c      	ldr	r1, [pc, #48]	; (8000cd4 <B1ButtonStatus+0xb0>)
 8000ca4:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <B1ButtonStatus+0xb4>)
 8000ca6:	f001 fd51 	bl	800274c <HAL_UART_Transmit_DMA>
		}
		before = current;
 8000caa:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <B1ButtonStatus+0x98>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a06      	ldr	r2, [pc, #24]	; (8000cc8 <B1ButtonStatus+0xa4>)
 8000cb0:	6013      	str	r3, [r2, #0]
	}
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40020800 	.word	0x40020800
 8000cbc:	200001e4 	.word	0x200001e4
 8000cc0:	20000000 	.word	0x20000000
 8000cc4:	08000839 	.word	0x08000839
 8000cc8:	200001e8 	.word	0x200001e8
 8000ccc:	20000198 	.word	0x20000198
 8000cd0:	08003cec 	.word	0x08003cec
 8000cd4:	2000019c 	.word	0x2000019c
 8000cd8:	20000094 	.word	0x20000094
 8000cdc:	08003d00 	.word	0x08003d00

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <Error_Handler+0x8>
	...

08000cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <HAL_MspInit+0x4c>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	4a0f      	ldr	r2, [pc, #60]	; (8000d38 <HAL_MspInit+0x4c>)
 8000cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d00:	6453      	str	r3, [r2, #68]	; 0x44
 8000d02:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	4a08      	ldr	r2, [pc, #32]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d2a:	2007      	movs	r0, #7
 8000d2c:	f000 faa6 	bl	800127c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40023800 	.word	0x40023800

08000d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	; 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a48      	ldr	r2, [pc, #288]	; (8000e7c <HAL_UART_MspInit+0x140>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	f040 8089 	bne.w	8000e72 <HAL_UART_MspInit+0x136>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d60:	2300      	movs	r3, #0
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	4b46      	ldr	r3, [pc, #280]	; (8000e80 <HAL_UART_MspInit+0x144>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	4a45      	ldr	r2, [pc, #276]	; (8000e80 <HAL_UART_MspInit+0x144>)
 8000d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d70:	4b43      	ldr	r3, [pc, #268]	; (8000e80 <HAL_UART_MspInit+0x144>)
 8000d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	4b3f      	ldr	r3, [pc, #252]	; (8000e80 <HAL_UART_MspInit+0x144>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	4a3e      	ldr	r2, [pc, #248]	; (8000e80 <HAL_UART_MspInit+0x144>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8c:	4b3c      	ldr	r3, [pc, #240]	; (8000e80 <HAL_UART_MspInit+0x144>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d98:	230c      	movs	r3, #12
 8000d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000da8:	2307      	movs	r3, #7
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4834      	ldr	r0, [pc, #208]	; (8000e84 <HAL_UART_MspInit+0x148>)
 8000db4:	f000 fe14 	bl	80019e0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000db8:	4b33      	ldr	r3, [pc, #204]	; (8000e88 <HAL_UART_MspInit+0x14c>)
 8000dba:	4a34      	ldr	r2, [pc, #208]	; (8000e8c <HAL_UART_MspInit+0x150>)
 8000dbc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000dbe:	4b32      	ldr	r3, [pc, #200]	; (8000e88 <HAL_UART_MspInit+0x14c>)
 8000dc0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dc4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dc6:	4b30      	ldr	r3, [pc, #192]	; (8000e88 <HAL_UART_MspInit+0x14c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dcc:	4b2e      	ldr	r3, [pc, #184]	; (8000e88 <HAL_UART_MspInit+0x14c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dd2:	4b2d      	ldr	r3, [pc, #180]	; (8000e88 <HAL_UART_MspInit+0x14c>)
 8000dd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dd8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dda:	4b2b      	ldr	r3, [pc, #172]	; (8000e88 <HAL_UART_MspInit+0x14c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000de0:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <HAL_UART_MspInit+0x14c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000de6:	4b28      	ldr	r3, [pc, #160]	; (8000e88 <HAL_UART_MspInit+0x14c>)
 8000de8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dec:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dee:	4b26      	ldr	r3, [pc, #152]	; (8000e88 <HAL_UART_MspInit+0x14c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000df4:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <HAL_UART_MspInit+0x14c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000dfa:	4823      	ldr	r0, [pc, #140]	; (8000e88 <HAL_UART_MspInit+0x14c>)
 8000dfc:	f000 fa80 	bl	8001300 <HAL_DMA_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000e06:	f7ff ff6b 	bl	8000ce0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a1e      	ldr	r2, [pc, #120]	; (8000e88 <HAL_UART_MspInit+0x14c>)
 8000e0e:	639a      	str	r2, [r3, #56]	; 0x38
 8000e10:	4a1d      	ldr	r2, [pc, #116]	; (8000e88 <HAL_UART_MspInit+0x14c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000e16:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <HAL_UART_MspInit+0x154>)
 8000e18:	4a1e      	ldr	r2, [pc, #120]	; (8000e94 <HAL_UART_MspInit+0x158>)
 8000e1a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000e1c:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <HAL_UART_MspInit+0x154>)
 8000e1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e22:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e24:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <HAL_UART_MspInit+0x154>)
 8000e26:	2240      	movs	r2, #64	; 0x40
 8000e28:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e2a:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <HAL_UART_MspInit+0x154>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e30:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <HAL_UART_MspInit+0x154>)
 8000e32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e36:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <HAL_UART_MspInit+0x154>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e3e:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <HAL_UART_MspInit+0x154>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_UART_MspInit+0x154>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <HAL_UART_MspInit+0x154>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <HAL_UART_MspInit+0x154>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000e56:	480e      	ldr	r0, [pc, #56]	; (8000e90 <HAL_UART_MspInit+0x154>)
 8000e58:	f000 fa52 	bl	8001300 <HAL_DMA_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000e62:	f7ff ff3d 	bl	8000ce0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a09      	ldr	r2, [pc, #36]	; (8000e90 <HAL_UART_MspInit+0x154>)
 8000e6a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e6c:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <HAL_UART_MspInit+0x154>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e72:	bf00      	nop
 8000e74:	3728      	adds	r7, #40	; 0x28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40004400 	.word	0x40004400
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020000 	.word	0x40020000
 8000e88:	200000d8 	.word	0x200000d8
 8000e8c:	40026088 	.word	0x40026088
 8000e90:	20000138 	.word	0x20000138
 8000e94:	400260a0 	.word	0x400260a0

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <NMI_Handler+0x4>

08000e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <HardFault_Handler+0x4>

08000ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <MemManage_Handler+0x4>

08000eaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <BusFault_Handler+0x4>

08000eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <UsageFault_Handler+0x4>

08000eb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee4:	f000 f8da 	bl	800109c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}

08000eec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <DMA1_Stream5_IRQHandler+0x10>)
 8000ef2:	f000 fb0b 	bl	800150c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200000d8 	.word	0x200000d8

08000f00 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <DMA1_Stream6_IRQHandler+0x10>)
 8000f06:	f000 fb01 	bl	800150c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000138 	.word	0x20000138

08000f14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f1c:	4a14      	ldr	r2, [pc, #80]	; (8000f70 <_sbrk+0x5c>)
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <_sbrk+0x60>)
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f28:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <_sbrk+0x64>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d102      	bne.n	8000f36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <_sbrk+0x64>)
 8000f32:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <_sbrk+0x68>)
 8000f34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <_sbrk+0x64>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d207      	bcs.n	8000f54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f44:	f002 f9d6 	bl	80032f4 <__errno>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	220c      	movs	r2, #12
 8000f4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	e009      	b.n	8000f68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <_sbrk+0x64>)
 8000f64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f66:	68fb      	ldr	r3, [r7, #12]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20020000 	.word	0x20020000
 8000f74:	00000400 	.word	0x00000400
 8000f78:	200001fc 	.word	0x200001fc
 8000f7c:	20000218 	.word	0x20000218

08000f80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <SystemInit+0x20>)
 8000f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <SystemInit+0x20>)
 8000f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000faa:	490e      	ldr	r1, [pc, #56]	; (8000fe4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fac:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb0:	e002      	b.n	8000fb8 <LoopCopyDataInit>

08000fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb6:	3304      	adds	r3, #4

08000fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fbc:	d3f9      	bcc.n	8000fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fbe:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fc0:	4c0b      	ldr	r4, [pc, #44]	; (8000ff0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc4:	e001      	b.n	8000fca <LoopFillZerobss>

08000fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc8:	3204      	adds	r2, #4

08000fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fcc:	d3fb      	bcc.n	8000fc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fce:	f7ff ffd7 	bl	8000f80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f002 f995 	bl	8003300 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd6:	f7ff fadd 	bl	8000594 <main>
  bx  lr    
 8000fda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000fe8:	08003d78 	.word	0x08003d78
  ldr r2, =_sbss
 8000fec:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ff0:	20000214 	.word	0x20000214

08000ff4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC_IRQHandler>
	...

08000ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_Init+0x40>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <HAL_Init+0x40>)
 8001002:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001006:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <HAL_Init+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <HAL_Init+0x40>)
 800100e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001012:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a07      	ldr	r2, [pc, #28]	; (8001038 <HAL_Init+0x40>)
 800101a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001020:	2003      	movs	r0, #3
 8001022:	f000 f92b 	bl	800127c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001026:	2000      	movs	r0, #0
 8001028:	f000 f808 	bl	800103c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800102c:	f7ff fe5e 	bl	8000cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023c00 	.word	0x40023c00

0800103c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_InitTick+0x54>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_InitTick+0x58>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001052:	fbb3 f3f1 	udiv	r3, r3, r1
 8001056:	fbb2 f3f3 	udiv	r3, r2, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f000 f943 	bl	80012e6 <HAL_SYSTICK_Config>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e00e      	b.n	8001088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b0f      	cmp	r3, #15
 800106e:	d80a      	bhi.n	8001086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001070:	2200      	movs	r2, #0
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f000 f90b 	bl	8001292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800107c:	4a06      	ldr	r2, [pc, #24]	; (8001098 <HAL_InitTick+0x5c>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	e000      	b.n	8001088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000008 	.word	0x20000008
 8001094:	20000010 	.word	0x20000010
 8001098:	2000000c 	.word	0x2000000c

0800109c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x20>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x24>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <HAL_IncTick+0x24>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000010 	.word	0x20000010
 80010c0:	20000200 	.word	0x20000200

080010c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return uwTick;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <HAL_GetTick+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000200 	.word	0x20000200

080010dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800110c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110e:	4a04      	ldr	r2, [pc, #16]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	60d3      	str	r3, [r2, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	db0b      	blt.n	800116a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 021f 	and.w	r2, r3, #31
 8001158:	4907      	ldr	r1, [pc, #28]	; (8001178 <__NVIC_EnableIRQ+0x38>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	095b      	lsrs	r3, r3, #5
 8001160:	2001      	movs	r0, #1
 8001162:	fa00 f202 	lsl.w	r2, r0, r2
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100

0800117c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	db0a      	blt.n	80011a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	490c      	ldr	r1, [pc, #48]	; (80011c8 <__NVIC_SetPriority+0x4c>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	0112      	lsls	r2, r2, #4
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	440b      	add	r3, r1
 80011a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a4:	e00a      	b.n	80011bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4908      	ldr	r1, [pc, #32]	; (80011cc <__NVIC_SetPriority+0x50>)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	3b04      	subs	r3, #4
 80011b4:	0112      	lsls	r2, r2, #4
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	440b      	add	r3, r1
 80011ba:	761a      	strb	r2, [r3, #24]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000e100 	.word	0xe000e100
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	; 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f1c3 0307 	rsb	r3, r3, #7
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	bf28      	it	cs
 80011ee:	2304      	movcs	r3, #4
 80011f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3304      	adds	r3, #4
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d902      	bls.n	8001200 <NVIC_EncodePriority+0x30>
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3b03      	subs	r3, #3
 80011fe:	e000      	b.n	8001202 <NVIC_EncodePriority+0x32>
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	f04f 32ff 	mov.w	r2, #4294967295
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	401a      	ands	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001218:	f04f 31ff 	mov.w	r1, #4294967295
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	43d9      	mvns	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	4313      	orrs	r3, r2
         );
}
 800122a:	4618      	mov	r0, r3
 800122c:	3724      	adds	r7, #36	; 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001248:	d301      	bcc.n	800124e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124a:	2301      	movs	r3, #1
 800124c:	e00f      	b.n	800126e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <SysTick_Config+0x40>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001256:	210f      	movs	r1, #15
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f7ff ff8e 	bl	800117c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <SysTick_Config+0x40>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <SysTick_Config+0x40>)
 8001268:	2207      	movs	r2, #7
 800126a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	e000e010 	.word	0xe000e010

0800127c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff29 	bl	80010dc <__NVIC_SetPriorityGrouping>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a4:	f7ff ff3e 	bl	8001124 <__NVIC_GetPriorityGrouping>
 80012a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	6978      	ldr	r0, [r7, #20]
 80012b0:	f7ff ff8e 	bl	80011d0 <NVIC_EncodePriority>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff5d 	bl	800117c <__NVIC_SetPriority>
}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff31 	bl	8001140 <__NVIC_EnableIRQ>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ffa2 	bl	8001238 <SysTick_Config>
 80012f4:	4603      	mov	r3, r0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff feda 	bl	80010c4 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d101      	bne.n	800131c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e099      	b.n	8001450 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2202      	movs	r2, #2
 8001320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0201 	bic.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800133c:	e00f      	b.n	800135e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800133e:	f7ff fec1 	bl	80010c4 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b05      	cmp	r3, #5
 800134a:	d908      	bls.n	800135e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2220      	movs	r2, #32
 8001350:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2203      	movs	r2, #3
 8001356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e078      	b.n	8001450 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1e8      	bne.n	800133e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	4b38      	ldr	r3, [pc, #224]	; (8001458 <HAL_DMA_Init+0x158>)
 8001378:	4013      	ands	r3, r2
 800137a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800138a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001396:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d107      	bne.n	80013c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c0:	4313      	orrs	r3, r2
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f023 0307 	bic.w	r3, r3, #7
 80013de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	d117      	bne.n	8001422 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00e      	beq.n	8001422 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 fa6f 	bl	80018e8 <DMA_CheckFifoParam>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d008      	beq.n	8001422 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2240      	movs	r2, #64	; 0x40
 8001414:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800141e:	2301      	movs	r3, #1
 8001420:	e016      	b.n	8001450 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 fa26 	bl	800187c <DMA_CalcBaseAndBitshift>
 8001430:	4603      	mov	r3, r0
 8001432:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001438:	223f      	movs	r2, #63	; 0x3f
 800143a:	409a      	lsls	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2201      	movs	r2, #1
 800144a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	f010803f 	.word	0xf010803f

0800145c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001472:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800147a:	2b01      	cmp	r3, #1
 800147c:	d101      	bne.n	8001482 <HAL_DMA_Start_IT+0x26>
 800147e:	2302      	movs	r3, #2
 8001480:	e040      	b.n	8001504 <HAL_DMA_Start_IT+0xa8>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b01      	cmp	r3, #1
 8001494:	d12f      	bne.n	80014f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2202      	movs	r2, #2
 800149a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f000 f9b8 	bl	8001820 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b4:	223f      	movs	r2, #63	; 0x3f
 80014b6:	409a      	lsls	r2, r3
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0216 	orr.w	r2, r2, #22
 80014ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d007      	beq.n	80014e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0208 	orr.w	r2, r2, #8
 80014e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0201 	orr.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	e005      	b.n	8001502 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014fe:	2302      	movs	r3, #2
 8001500:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001502:	7dfb      	ldrb	r3, [r7, #23]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001518:	4b8e      	ldr	r3, [pc, #568]	; (8001754 <HAL_DMA_IRQHandler+0x248>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a8e      	ldr	r2, [pc, #568]	; (8001758 <HAL_DMA_IRQHandler+0x24c>)
 800151e:	fba2 2303 	umull	r2, r3, r2, r3
 8001522:	0a9b      	lsrs	r3, r3, #10
 8001524:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001536:	2208      	movs	r2, #8
 8001538:	409a      	lsls	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4013      	ands	r3, r2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d01a      	beq.n	8001578 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	d013      	beq.n	8001578 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0204 	bic.w	r2, r2, #4
 800155e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001564:	2208      	movs	r2, #8
 8001566:	409a      	lsls	r2, r3
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001570:	f043 0201 	orr.w	r2, r3, #1
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157c:	2201      	movs	r2, #1
 800157e:	409a      	lsls	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4013      	ands	r3, r2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d012      	beq.n	80015ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00b      	beq.n	80015ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159a:	2201      	movs	r2, #1
 800159c:	409a      	lsls	r2, r3
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a6:	f043 0202 	orr.w	r2, r3, #2
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b2:	2204      	movs	r2, #4
 80015b4:	409a      	lsls	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4013      	ands	r3, r2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d012      	beq.n	80015e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00b      	beq.n	80015e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d0:	2204      	movs	r2, #4
 80015d2:	409a      	lsls	r2, r3
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015dc:	f043 0204 	orr.w	r2, r3, #4
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e8:	2210      	movs	r2, #16
 80015ea:	409a      	lsls	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4013      	ands	r3, r2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d043      	beq.n	800167c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d03c      	beq.n	800167c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001606:	2210      	movs	r2, #16
 8001608:	409a      	lsls	r2, r3
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d018      	beq.n	800164e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d108      	bne.n	800163c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	2b00      	cmp	r3, #0
 8001630:	d024      	beq.n	800167c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	4798      	blx	r3
 800163a:	e01f      	b.n	800167c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001640:	2b00      	cmp	r3, #0
 8001642:	d01b      	beq.n	800167c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	4798      	blx	r3
 800164c:	e016      	b.n	800167c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001658:	2b00      	cmp	r3, #0
 800165a:	d107      	bne.n	800166c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0208 	bic.w	r2, r2, #8
 800166a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001680:	2220      	movs	r2, #32
 8001682:	409a      	lsls	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 808f 	beq.w	80017ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	2b00      	cmp	r3, #0
 800169a:	f000 8087 	beq.w	80017ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a2:	2220      	movs	r2, #32
 80016a4:	409a      	lsls	r2, r3
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b05      	cmp	r3, #5
 80016b4:	d136      	bne.n	8001724 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0216 	bic.w	r2, r2, #22
 80016c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	695a      	ldr	r2, [r3, #20]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d103      	bne.n	80016e6 <HAL_DMA_IRQHandler+0x1da>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d007      	beq.n	80016f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0208 	bic.w	r2, r2, #8
 80016f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fa:	223f      	movs	r2, #63	; 0x3f
 80016fc:	409a      	lsls	r2, r3
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001716:	2b00      	cmp	r3, #0
 8001718:	d07e      	beq.n	8001818 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	4798      	blx	r3
        }
        return;
 8001722:	e079      	b.n	8001818 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d01d      	beq.n	800176e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d10d      	bne.n	800175c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001744:	2b00      	cmp	r3, #0
 8001746:	d031      	beq.n	80017ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	4798      	blx	r3
 8001750:	e02c      	b.n	80017ac <HAL_DMA_IRQHandler+0x2a0>
 8001752:	bf00      	nop
 8001754:	20000008 	.word	0x20000008
 8001758:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001760:	2b00      	cmp	r3, #0
 8001762:	d023      	beq.n	80017ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	4798      	blx	r3
 800176c:	e01e      	b.n	80017ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001778:	2b00      	cmp	r3, #0
 800177a:	d10f      	bne.n	800179c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0210 	bic.w	r2, r2, #16
 800178a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d032      	beq.n	800181a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d022      	beq.n	8001806 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2205      	movs	r2, #5
 80017c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0201 	bic.w	r2, r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	3301      	adds	r3, #1
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d307      	bcc.n	80017f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f2      	bne.n	80017d8 <HAL_DMA_IRQHandler+0x2cc>
 80017f2:	e000      	b.n	80017f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80017f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	2b00      	cmp	r3, #0
 800180c:	d005      	beq.n	800181a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	4798      	blx	r3
 8001816:	e000      	b.n	800181a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001818:	bf00      	nop
    }
  }
}
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800183c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2b40      	cmp	r3, #64	; 0x40
 800184c:	d108      	bne.n	8001860 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800185e:	e007      	b.n	8001870 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	60da      	str	r2, [r3, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	3b10      	subs	r3, #16
 800188c:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <DMA_CalcBaseAndBitshift+0x64>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	091b      	lsrs	r3, r3, #4
 8001894:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001896:	4a13      	ldr	r2, [pc, #76]	; (80018e4 <DMA_CalcBaseAndBitshift+0x68>)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4413      	add	r3, r2
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	d909      	bls.n	80018be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018b2:	f023 0303 	bic.w	r3, r3, #3
 80018b6:	1d1a      	adds	r2, r3, #4
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	659a      	str	r2, [r3, #88]	; 0x58
 80018bc:	e007      	b.n	80018ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018c6:	f023 0303 	bic.w	r3, r3, #3
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	aaaaaaab 	.word	0xaaaaaaab
 80018e4:	08003d2c 	.word	0x08003d2c

080018e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d11f      	bne.n	8001942 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d856      	bhi.n	80019b6 <DMA_CheckFifoParam+0xce>
 8001908:	a201      	add	r2, pc, #4	; (adr r2, 8001910 <DMA_CheckFifoParam+0x28>)
 800190a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190e:	bf00      	nop
 8001910:	08001921 	.word	0x08001921
 8001914:	08001933 	.word	0x08001933
 8001918:	08001921 	.word	0x08001921
 800191c:	080019b7 	.word	0x080019b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d046      	beq.n	80019ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001930:	e043      	b.n	80019ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001936:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800193a:	d140      	bne.n	80019be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001940:	e03d      	b.n	80019be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800194a:	d121      	bne.n	8001990 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	2b03      	cmp	r3, #3
 8001950:	d837      	bhi.n	80019c2 <DMA_CheckFifoParam+0xda>
 8001952:	a201      	add	r2, pc, #4	; (adr r2, 8001958 <DMA_CheckFifoParam+0x70>)
 8001954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001958:	08001969 	.word	0x08001969
 800195c:	0800196f 	.word	0x0800196f
 8001960:	08001969 	.word	0x08001969
 8001964:	08001981 	.word	0x08001981
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	73fb      	strb	r3, [r7, #15]
      break;
 800196c:	e030      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001972:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d025      	beq.n	80019c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800197e:	e022      	b.n	80019c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001988:	d11f      	bne.n	80019ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800198e:	e01c      	b.n	80019ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d903      	bls.n	800199e <DMA_CheckFifoParam+0xb6>
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	2b03      	cmp	r3, #3
 800199a:	d003      	beq.n	80019a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800199c:	e018      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	73fb      	strb	r3, [r7, #15]
      break;
 80019a2:	e015      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00e      	beq.n	80019ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
      break;
 80019b4:	e00b      	b.n	80019ce <DMA_CheckFifoParam+0xe6>
      break;
 80019b6:	bf00      	nop
 80019b8:	e00a      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      break;
 80019ba:	bf00      	nop
 80019bc:	e008      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      break;
 80019be:	bf00      	nop
 80019c0:	e006      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      break;
 80019c2:	bf00      	nop
 80019c4:	e004      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      break;
 80019c6:	bf00      	nop
 80019c8:	e002      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80019ca:	bf00      	nop
 80019cc:	e000      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      break;
 80019ce:	bf00      	nop
    }
  } 
  
  return status; 
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop

080019e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	e159      	b.n	8001cb0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019fc:	2201      	movs	r2, #1
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	f040 8148 	bne.w	8001caa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d005      	beq.n	8001a32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d130      	bne.n	8001a94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a68:	2201      	movs	r2, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	f003 0201 	and.w	r2, r3, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d017      	beq.n	8001ad0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	2203      	movs	r2, #3
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d123      	bne.n	8001b24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	08da      	lsrs	r2, r3, #3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3208      	adds	r2, #8
 8001ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	220f      	movs	r2, #15
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	08da      	lsrs	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3208      	adds	r2, #8
 8001b1e:	69b9      	ldr	r1, [r7, #24]
 8001b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0203 	and.w	r2, r3, #3
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80a2 	beq.w	8001caa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b57      	ldr	r3, [pc, #348]	; (8001cc8 <HAL_GPIO_Init+0x2e8>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	4a56      	ldr	r2, [pc, #344]	; (8001cc8 <HAL_GPIO_Init+0x2e8>)
 8001b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b74:	6453      	str	r3, [r2, #68]	; 0x44
 8001b76:	4b54      	ldr	r3, [pc, #336]	; (8001cc8 <HAL_GPIO_Init+0x2e8>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b82:	4a52      	ldr	r2, [pc, #328]	; (8001ccc <HAL_GPIO_Init+0x2ec>)
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	3302      	adds	r3, #2
 8001b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	220f      	movs	r2, #15
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a49      	ldr	r2, [pc, #292]	; (8001cd0 <HAL_GPIO_Init+0x2f0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d019      	beq.n	8001be2 <HAL_GPIO_Init+0x202>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a48      	ldr	r2, [pc, #288]	; (8001cd4 <HAL_GPIO_Init+0x2f4>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d013      	beq.n	8001bde <HAL_GPIO_Init+0x1fe>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a47      	ldr	r2, [pc, #284]	; (8001cd8 <HAL_GPIO_Init+0x2f8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00d      	beq.n	8001bda <HAL_GPIO_Init+0x1fa>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a46      	ldr	r2, [pc, #280]	; (8001cdc <HAL_GPIO_Init+0x2fc>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d007      	beq.n	8001bd6 <HAL_GPIO_Init+0x1f6>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a45      	ldr	r2, [pc, #276]	; (8001ce0 <HAL_GPIO_Init+0x300>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d101      	bne.n	8001bd2 <HAL_GPIO_Init+0x1f2>
 8001bce:	2304      	movs	r3, #4
 8001bd0:	e008      	b.n	8001be4 <HAL_GPIO_Init+0x204>
 8001bd2:	2307      	movs	r3, #7
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x204>
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e004      	b.n	8001be4 <HAL_GPIO_Init+0x204>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e002      	b.n	8001be4 <HAL_GPIO_Init+0x204>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_GPIO_Init+0x204>
 8001be2:	2300      	movs	r3, #0
 8001be4:	69fa      	ldr	r2, [r7, #28]
 8001be6:	f002 0203 	and.w	r2, r2, #3
 8001bea:	0092      	lsls	r2, r2, #2
 8001bec:	4093      	lsls	r3, r2
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bf4:	4935      	ldr	r1, [pc, #212]	; (8001ccc <HAL_GPIO_Init+0x2ec>)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c02:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c26:	4a2f      	ldr	r2, [pc, #188]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c50:	4a24      	ldr	r2, [pc, #144]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c56:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c7a:	4a1a      	ldr	r2, [pc, #104]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c80:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca4:	4a0f      	ldr	r2, [pc, #60]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3301      	adds	r3, #1
 8001cae:	61fb      	str	r3, [r7, #28]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	2b0f      	cmp	r3, #15
 8001cb4:	f67f aea2 	bls.w	80019fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	3724      	adds	r7, #36	; 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40013800 	.word	0x40013800
 8001cd0:	40020000 	.word	0x40020000
 8001cd4:	40020400 	.word	0x40020400
 8001cd8:	40020800 	.word	0x40020800
 8001cdc:	40020c00 	.word	0x40020c00
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40013c00 	.word	0x40013c00

08001ce8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	887b      	ldrh	r3, [r7, #2]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d00:	2301      	movs	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
 8001d04:	e001      	b.n	8001d0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d06:	2300      	movs	r3, #0
 8001d08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	807b      	strh	r3, [r7, #2]
 8001d24:	4613      	mov	r3, r2
 8001d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d28:	787b      	ldrb	r3, [r7, #1]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d2e:	887a      	ldrh	r2, [r7, #2]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d34:	e003      	b.n	8001d3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d36:	887b      	ldrh	r3, [r7, #2]
 8001d38:	041a      	lsls	r2, r3, #16
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	619a      	str	r2, [r3, #24]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b085      	sub	sp, #20
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	460b      	mov	r3, r1
 8001d54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d5c:	887a      	ldrh	r2, [r7, #2]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	4013      	ands	r3, r2
 8001d62:	041a      	lsls	r2, r3, #16
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	43d9      	mvns	r1, r3
 8001d68:	887b      	ldrh	r3, [r7, #2]
 8001d6a:	400b      	ands	r3, r1
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	619a      	str	r2, [r3, #24]
}
 8001d72:	bf00      	nop
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
	...

08001d80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e267      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d075      	beq.n	8001e8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d9e:	4b88      	ldr	r3, [pc, #544]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d00c      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001daa:	4b85      	ldr	r3, [pc, #532]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d112      	bne.n	8001ddc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001db6:	4b82      	ldr	r3, [pc, #520]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dc2:	d10b      	bne.n	8001ddc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc4:	4b7e      	ldr	r3, [pc, #504]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d05b      	beq.n	8001e88 <HAL_RCC_OscConfig+0x108>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d157      	bne.n	8001e88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e242      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de4:	d106      	bne.n	8001df4 <HAL_RCC_OscConfig+0x74>
 8001de6:	4b76      	ldr	r3, [pc, #472]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a75      	ldr	r2, [pc, #468]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	e01d      	b.n	8001e30 <HAL_RCC_OscConfig+0xb0>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dfc:	d10c      	bne.n	8001e18 <HAL_RCC_OscConfig+0x98>
 8001dfe:	4b70      	ldr	r3, [pc, #448]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a6f      	ldr	r2, [pc, #444]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	4b6d      	ldr	r3, [pc, #436]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a6c      	ldr	r2, [pc, #432]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	e00b      	b.n	8001e30 <HAL_RCC_OscConfig+0xb0>
 8001e18:	4b69      	ldr	r3, [pc, #420]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a68      	ldr	r2, [pc, #416]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	4b66      	ldr	r3, [pc, #408]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a65      	ldr	r2, [pc, #404]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d013      	beq.n	8001e60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7ff f944 	bl	80010c4 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e40:	f7ff f940 	bl	80010c4 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	; 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e207      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e52:	4b5b      	ldr	r3, [pc, #364]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0xc0>
 8001e5e:	e014      	b.n	8001e8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7ff f930 	bl	80010c4 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e68:	f7ff f92c 	bl	80010c4 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b64      	cmp	r3, #100	; 0x64
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e1f3      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7a:	4b51      	ldr	r3, [pc, #324]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0xe8>
 8001e86:	e000      	b.n	8001e8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d063      	beq.n	8001f5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e96:	4b4a      	ldr	r3, [pc, #296]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00b      	beq.n	8001eba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ea2:	4b47      	ldr	r3, [pc, #284]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d11c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eae:	4b44      	ldr	r3, [pc, #272]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d116      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eba:	4b41      	ldr	r3, [pc, #260]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d005      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x152>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d001      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e1c7      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed2:	4b3b      	ldr	r3, [pc, #236]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4937      	ldr	r1, [pc, #220]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee6:	e03a      	b.n	8001f5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d020      	beq.n	8001f32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ef0:	4b34      	ldr	r3, [pc, #208]	; (8001fc4 <HAL_RCC_OscConfig+0x244>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef6:	f7ff f8e5 	bl	80010c4 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001efe:	f7ff f8e1 	bl	80010c4 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e1a8      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f10:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1c:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4925      	ldr	r1, [pc, #148]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	600b      	str	r3, [r1, #0]
 8001f30:	e015      	b.n	8001f5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f32:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <HAL_RCC_OscConfig+0x244>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f38:	f7ff f8c4 	bl	80010c4 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f40:	f7ff f8c0 	bl	80010c4 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e187      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f52:	4b1b      	ldr	r3, [pc, #108]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f0      	bne.n	8001f40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d036      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d016      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <HAL_RCC_OscConfig+0x248>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f78:	f7ff f8a4 	bl	80010c4 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f80:	f7ff f8a0 	bl	80010c4 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e167      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f92:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <HAL_RCC_OscConfig+0x240>)
 8001f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0x200>
 8001f9e:	e01b      	b.n	8001fd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa0:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_RCC_OscConfig+0x248>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa6:	f7ff f88d 	bl	80010c4 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fac:	e00e      	b.n	8001fcc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fae:	f7ff f889 	bl	80010c4 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d907      	bls.n	8001fcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e150      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	42470000 	.word	0x42470000
 8001fc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fcc:	4b88      	ldr	r3, [pc, #544]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8001fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1ea      	bne.n	8001fae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 8097 	beq.w	8002114 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fea:	4b81      	ldr	r3, [pc, #516]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10f      	bne.n	8002016 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	4b7d      	ldr	r3, [pc, #500]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	4a7c      	ldr	r2, [pc, #496]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8002000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002004:	6413      	str	r3, [r2, #64]	; 0x40
 8002006:	4b7a      	ldr	r3, [pc, #488]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002012:	2301      	movs	r3, #1
 8002014:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002016:	4b77      	ldr	r3, [pc, #476]	; (80021f4 <HAL_RCC_OscConfig+0x474>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201e:	2b00      	cmp	r3, #0
 8002020:	d118      	bne.n	8002054 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002022:	4b74      	ldr	r3, [pc, #464]	; (80021f4 <HAL_RCC_OscConfig+0x474>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a73      	ldr	r2, [pc, #460]	; (80021f4 <HAL_RCC_OscConfig+0x474>)
 8002028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800202e:	f7ff f849 	bl	80010c4 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002036:	f7ff f845 	bl	80010c4 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e10c      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002048:	4b6a      	ldr	r3, [pc, #424]	; (80021f4 <HAL_RCC_OscConfig+0x474>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d106      	bne.n	800206a <HAL_RCC_OscConfig+0x2ea>
 800205c:	4b64      	ldr	r3, [pc, #400]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 800205e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002060:	4a63      	ldr	r2, [pc, #396]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	6713      	str	r3, [r2, #112]	; 0x70
 8002068:	e01c      	b.n	80020a4 <HAL_RCC_OscConfig+0x324>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b05      	cmp	r3, #5
 8002070:	d10c      	bne.n	800208c <HAL_RCC_OscConfig+0x30c>
 8002072:	4b5f      	ldr	r3, [pc, #380]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8002074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002076:	4a5e      	ldr	r2, [pc, #376]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8002078:	f043 0304 	orr.w	r3, r3, #4
 800207c:	6713      	str	r3, [r2, #112]	; 0x70
 800207e:	4b5c      	ldr	r3, [pc, #368]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8002080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002082:	4a5b      	ldr	r2, [pc, #364]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6713      	str	r3, [r2, #112]	; 0x70
 800208a:	e00b      	b.n	80020a4 <HAL_RCC_OscConfig+0x324>
 800208c:	4b58      	ldr	r3, [pc, #352]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 800208e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002090:	4a57      	ldr	r2, [pc, #348]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8002092:	f023 0301 	bic.w	r3, r3, #1
 8002096:	6713      	str	r3, [r2, #112]	; 0x70
 8002098:	4b55      	ldr	r3, [pc, #340]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 800209a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209c:	4a54      	ldr	r2, [pc, #336]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 800209e:	f023 0304 	bic.w	r3, r3, #4
 80020a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d015      	beq.n	80020d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ac:	f7ff f80a 	bl	80010c4 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b2:	e00a      	b.n	80020ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b4:	f7ff f806 	bl	80010c4 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e0cb      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ca:	4b49      	ldr	r3, [pc, #292]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 80020cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0ee      	beq.n	80020b4 <HAL_RCC_OscConfig+0x334>
 80020d6:	e014      	b.n	8002102 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d8:	f7fe fff4 	bl	80010c4 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020de:	e00a      	b.n	80020f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e0:	f7fe fff0 	bl	80010c4 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e0b5      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f6:	4b3e      	ldr	r3, [pc, #248]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 80020f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1ee      	bne.n	80020e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002102:	7dfb      	ldrb	r3, [r7, #23]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d105      	bne.n	8002114 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002108:	4b39      	ldr	r3, [pc, #228]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	4a38      	ldr	r2, [pc, #224]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 800210e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002112:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 80a1 	beq.w	8002260 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800211e:	4b34      	ldr	r3, [pc, #208]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	2b08      	cmp	r3, #8
 8002128:	d05c      	beq.n	80021e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d141      	bne.n	80021b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002132:	4b31      	ldr	r3, [pc, #196]	; (80021f8 <HAL_RCC_OscConfig+0x478>)
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7fe ffc4 	bl	80010c4 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002140:	f7fe ffc0 	bl	80010c4 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e087      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002152:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f0      	bne.n	8002140 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69da      	ldr	r2, [r3, #28]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	019b      	lsls	r3, r3, #6
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002174:	085b      	lsrs	r3, r3, #1
 8002176:	3b01      	subs	r3, #1
 8002178:	041b      	lsls	r3, r3, #16
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002180:	061b      	lsls	r3, r3, #24
 8002182:	491b      	ldr	r1, [pc, #108]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002188:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <HAL_RCC_OscConfig+0x478>)
 800218a:	2201      	movs	r2, #1
 800218c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218e:	f7fe ff99 	bl	80010c4 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002196:	f7fe ff95 	bl	80010c4 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e05c      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0f0      	beq.n	8002196 <HAL_RCC_OscConfig+0x416>
 80021b4:	e054      	b.n	8002260 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <HAL_RCC_OscConfig+0x478>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7fe ff82 	bl	80010c4 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c4:	f7fe ff7e 	bl	80010c4 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e045      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_RCC_OscConfig+0x470>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x444>
 80021e2:	e03d      	b.n	8002260 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d107      	bne.n	80021fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e038      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40007000 	.word	0x40007000
 80021f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021fc:	4b1b      	ldr	r3, [pc, #108]	; (800226c <HAL_RCC_OscConfig+0x4ec>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d028      	beq.n	800225c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002214:	429a      	cmp	r2, r3
 8002216:	d121      	bne.n	800225c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002222:	429a      	cmp	r2, r3
 8002224:	d11a      	bne.n	800225c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800222c:	4013      	ands	r3, r2
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002232:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002234:	4293      	cmp	r3, r2
 8002236:	d111      	bne.n	800225c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002242:	085b      	lsrs	r3, r3, #1
 8002244:	3b01      	subs	r3, #1
 8002246:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002248:	429a      	cmp	r2, r3
 800224a:	d107      	bne.n	800225c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002256:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002258:	429a      	cmp	r2, r3
 800225a:	d001      	beq.n	8002260 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800

08002270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0cc      	b.n	800241e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002284:	4b68      	ldr	r3, [pc, #416]	; (8002428 <HAL_RCC_ClockConfig+0x1b8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	429a      	cmp	r2, r3
 8002290:	d90c      	bls.n	80022ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002292:	4b65      	ldr	r3, [pc, #404]	; (8002428 <HAL_RCC_ClockConfig+0x1b8>)
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229a:	4b63      	ldr	r3, [pc, #396]	; (8002428 <HAL_RCC_ClockConfig+0x1b8>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0b8      	b.n	800241e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d020      	beq.n	80022fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022c4:	4b59      	ldr	r3, [pc, #356]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	4a58      	ldr	r2, [pc, #352]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d005      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022dc:	4b53      	ldr	r3, [pc, #332]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	4a52      	ldr	r2, [pc, #328]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e8:	4b50      	ldr	r3, [pc, #320]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	494d      	ldr	r1, [pc, #308]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d044      	beq.n	8002390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d107      	bne.n	800231e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230e:	4b47      	ldr	r3, [pc, #284]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d119      	bne.n	800234e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e07f      	b.n	800241e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d003      	beq.n	800232e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800232a:	2b03      	cmp	r3, #3
 800232c:	d107      	bne.n	800233e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800232e:	4b3f      	ldr	r3, [pc, #252]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d109      	bne.n	800234e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e06f      	b.n	800241e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233e:	4b3b      	ldr	r3, [pc, #236]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e067      	b.n	800241e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800234e:	4b37      	ldr	r3, [pc, #220]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f023 0203 	bic.w	r2, r3, #3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4934      	ldr	r1, [pc, #208]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	4313      	orrs	r3, r2
 800235e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002360:	f7fe feb0 	bl	80010c4 <HAL_GetTick>
 8002364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002366:	e00a      	b.n	800237e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002368:	f7fe feac 	bl	80010c4 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	f241 3288 	movw	r2, #5000	; 0x1388
 8002376:	4293      	cmp	r3, r2
 8002378:	d901      	bls.n	800237e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e04f      	b.n	800241e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237e:	4b2b      	ldr	r3, [pc, #172]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 020c 	and.w	r2, r3, #12
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	429a      	cmp	r2, r3
 800238e:	d1eb      	bne.n	8002368 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002390:	4b25      	ldr	r3, [pc, #148]	; (8002428 <HAL_RCC_ClockConfig+0x1b8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d20c      	bcs.n	80023b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239e:	4b22      	ldr	r3, [pc, #136]	; (8002428 <HAL_RCC_ClockConfig+0x1b8>)
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a6:	4b20      	ldr	r3, [pc, #128]	; (8002428 <HAL_RCC_ClockConfig+0x1b8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e032      	b.n	800241e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d008      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c4:	4b19      	ldr	r3, [pc, #100]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	4916      	ldr	r1, [pc, #88]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d009      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e2:	4b12      	ldr	r3, [pc, #72]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	490e      	ldr	r1, [pc, #56]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023f6:	f000 f821 	bl	800243c <HAL_RCC_GetSysClockFreq>
 80023fa:	4602      	mov	r2, r0
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	490a      	ldr	r1, [pc, #40]	; (8002430 <HAL_RCC_ClockConfig+0x1c0>)
 8002408:	5ccb      	ldrb	r3, [r1, r3]
 800240a:	fa22 f303 	lsr.w	r3, r2, r3
 800240e:	4a09      	ldr	r2, [pc, #36]	; (8002434 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <HAL_RCC_ClockConfig+0x1c8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe fe10 	bl	800103c <HAL_InitTick>

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40023c00 	.word	0x40023c00
 800242c:	40023800 	.word	0x40023800
 8002430:	08003d14 	.word	0x08003d14
 8002434:	20000008 	.word	0x20000008
 8002438:	2000000c 	.word	0x2000000c

0800243c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800243c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002440:	b094      	sub	sp, #80	; 0x50
 8002442:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	647b      	str	r3, [r7, #68]	; 0x44
 8002448:	2300      	movs	r3, #0
 800244a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800244c:	2300      	movs	r3, #0
 800244e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002454:	4b79      	ldr	r3, [pc, #484]	; (800263c <HAL_RCC_GetSysClockFreq+0x200>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 030c 	and.w	r3, r3, #12
 800245c:	2b08      	cmp	r3, #8
 800245e:	d00d      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0x40>
 8002460:	2b08      	cmp	r3, #8
 8002462:	f200 80e1 	bhi.w	8002628 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <HAL_RCC_GetSysClockFreq+0x34>
 800246a:	2b04      	cmp	r3, #4
 800246c:	d003      	beq.n	8002476 <HAL_RCC_GetSysClockFreq+0x3a>
 800246e:	e0db      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002470:	4b73      	ldr	r3, [pc, #460]	; (8002640 <HAL_RCC_GetSysClockFreq+0x204>)
 8002472:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002474:	e0db      	b.n	800262e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002476:	4b73      	ldr	r3, [pc, #460]	; (8002644 <HAL_RCC_GetSysClockFreq+0x208>)
 8002478:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800247a:	e0d8      	b.n	800262e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800247c:	4b6f      	ldr	r3, [pc, #444]	; (800263c <HAL_RCC_GetSysClockFreq+0x200>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002484:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002486:	4b6d      	ldr	r3, [pc, #436]	; (800263c <HAL_RCC_GetSysClockFreq+0x200>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d063      	beq.n	800255a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002492:	4b6a      	ldr	r3, [pc, #424]	; (800263c <HAL_RCC_GetSysClockFreq+0x200>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	099b      	lsrs	r3, r3, #6
 8002498:	2200      	movs	r2, #0
 800249a:	63bb      	str	r3, [r7, #56]	; 0x38
 800249c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800249e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024a4:	633b      	str	r3, [r7, #48]	; 0x30
 80024a6:	2300      	movs	r3, #0
 80024a8:	637b      	str	r3, [r7, #52]	; 0x34
 80024aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80024ae:	4622      	mov	r2, r4
 80024b0:	462b      	mov	r3, r5
 80024b2:	f04f 0000 	mov.w	r0, #0
 80024b6:	f04f 0100 	mov.w	r1, #0
 80024ba:	0159      	lsls	r1, r3, #5
 80024bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024c0:	0150      	lsls	r0, r2, #5
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4621      	mov	r1, r4
 80024c8:	1a51      	subs	r1, r2, r1
 80024ca:	6139      	str	r1, [r7, #16]
 80024cc:	4629      	mov	r1, r5
 80024ce:	eb63 0301 	sbc.w	r3, r3, r1
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024e0:	4659      	mov	r1, fp
 80024e2:	018b      	lsls	r3, r1, #6
 80024e4:	4651      	mov	r1, sl
 80024e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024ea:	4651      	mov	r1, sl
 80024ec:	018a      	lsls	r2, r1, #6
 80024ee:	4651      	mov	r1, sl
 80024f0:	ebb2 0801 	subs.w	r8, r2, r1
 80024f4:	4659      	mov	r1, fp
 80024f6:	eb63 0901 	sbc.w	r9, r3, r1
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002506:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800250a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800250e:	4690      	mov	r8, r2
 8002510:	4699      	mov	r9, r3
 8002512:	4623      	mov	r3, r4
 8002514:	eb18 0303 	adds.w	r3, r8, r3
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	462b      	mov	r3, r5
 800251c:	eb49 0303 	adc.w	r3, r9, r3
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	f04f 0300 	mov.w	r3, #0
 800252a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800252e:	4629      	mov	r1, r5
 8002530:	024b      	lsls	r3, r1, #9
 8002532:	4621      	mov	r1, r4
 8002534:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002538:	4621      	mov	r1, r4
 800253a:	024a      	lsls	r2, r1, #9
 800253c:	4610      	mov	r0, r2
 800253e:	4619      	mov	r1, r3
 8002540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002542:	2200      	movs	r2, #0
 8002544:	62bb      	str	r3, [r7, #40]	; 0x28
 8002546:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002548:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800254c:	f7fd fea0 	bl	8000290 <__aeabi_uldivmod>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4613      	mov	r3, r2
 8002556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002558:	e058      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800255a:	4b38      	ldr	r3, [pc, #224]	; (800263c <HAL_RCC_GetSysClockFreq+0x200>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	099b      	lsrs	r3, r3, #6
 8002560:	2200      	movs	r2, #0
 8002562:	4618      	mov	r0, r3
 8002564:	4611      	mov	r1, r2
 8002566:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800256a:	623b      	str	r3, [r7, #32]
 800256c:	2300      	movs	r3, #0
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
 8002570:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002574:	4642      	mov	r2, r8
 8002576:	464b      	mov	r3, r9
 8002578:	f04f 0000 	mov.w	r0, #0
 800257c:	f04f 0100 	mov.w	r1, #0
 8002580:	0159      	lsls	r1, r3, #5
 8002582:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002586:	0150      	lsls	r0, r2, #5
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4641      	mov	r1, r8
 800258e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002592:	4649      	mov	r1, r9
 8002594:	eb63 0b01 	sbc.w	fp, r3, r1
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025ac:	ebb2 040a 	subs.w	r4, r2, sl
 80025b0:	eb63 050b 	sbc.w	r5, r3, fp
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	00eb      	lsls	r3, r5, #3
 80025be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025c2:	00e2      	lsls	r2, r4, #3
 80025c4:	4614      	mov	r4, r2
 80025c6:	461d      	mov	r5, r3
 80025c8:	4643      	mov	r3, r8
 80025ca:	18e3      	adds	r3, r4, r3
 80025cc:	603b      	str	r3, [r7, #0]
 80025ce:	464b      	mov	r3, r9
 80025d0:	eb45 0303 	adc.w	r3, r5, r3
 80025d4:	607b      	str	r3, [r7, #4]
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025e2:	4629      	mov	r1, r5
 80025e4:	028b      	lsls	r3, r1, #10
 80025e6:	4621      	mov	r1, r4
 80025e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025ec:	4621      	mov	r1, r4
 80025ee:	028a      	lsls	r2, r1, #10
 80025f0:	4610      	mov	r0, r2
 80025f2:	4619      	mov	r1, r3
 80025f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025f6:	2200      	movs	r2, #0
 80025f8:	61bb      	str	r3, [r7, #24]
 80025fa:	61fa      	str	r2, [r7, #28]
 80025fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002600:	f7fd fe46 	bl	8000290 <__aeabi_uldivmod>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4613      	mov	r3, r2
 800260a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_RCC_GetSysClockFreq+0x200>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	0c1b      	lsrs	r3, r3, #16
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	3301      	adds	r3, #1
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800261c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800261e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002620:	fbb2 f3f3 	udiv	r3, r2, r3
 8002624:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002626:	e002      	b.n	800262e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002628:	4b05      	ldr	r3, [pc, #20]	; (8002640 <HAL_RCC_GetSysClockFreq+0x204>)
 800262a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800262c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800262e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002630:	4618      	mov	r0, r3
 8002632:	3750      	adds	r7, #80	; 0x50
 8002634:	46bd      	mov	sp, r7
 8002636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800
 8002640:	00f42400 	.word	0x00f42400
 8002644:	007a1200 	.word	0x007a1200

08002648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800264c:	4b03      	ldr	r3, [pc, #12]	; (800265c <HAL_RCC_GetHCLKFreq+0x14>)
 800264e:	681b      	ldr	r3, [r3, #0]
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000008 	.word	0x20000008

08002660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002664:	f7ff fff0 	bl	8002648 <HAL_RCC_GetHCLKFreq>
 8002668:	4602      	mov	r2, r0
 800266a:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	0a9b      	lsrs	r3, r3, #10
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	4903      	ldr	r1, [pc, #12]	; (8002684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002676:	5ccb      	ldrb	r3, [r1, r3]
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800267c:	4618      	mov	r0, r3
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40023800 	.word	0x40023800
 8002684:	08003d24 	.word	0x08003d24

08002688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800268c:	f7ff ffdc 	bl	8002648 <HAL_RCC_GetHCLKFreq>
 8002690:	4602      	mov	r2, r0
 8002692:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	0b5b      	lsrs	r3, r3, #13
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	4903      	ldr	r1, [pc, #12]	; (80026ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800269e:	5ccb      	ldrb	r3, [r1, r3]
 80026a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40023800 	.word	0x40023800
 80026ac:	08003d24 	.word	0x08003d24

080026b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e03f      	b.n	8002742 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d106      	bne.n	80026dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7fe fb30 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2224      	movs	r2, #36	; 0x24
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 fb89 	bl	8002e0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	691a      	ldr	r2, [r3, #16]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002708:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695a      	ldr	r2, [r3, #20]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002718:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002728:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08c      	sub	sp, #48	; 0x30
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	4613      	mov	r3, r2
 8002758:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b20      	cmp	r3, #32
 8002764:	d165      	bne.n	8002832 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <HAL_UART_Transmit_DMA+0x26>
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e05e      	b.n	8002834 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_UART_Transmit_DMA+0x38>
 8002780:	2302      	movs	r3, #2
 8002782:	e057      	b.n	8002834 <HAL_UART_Transmit_DMA+0xe8>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	88fa      	ldrh	r2, [r7, #6]
 8002796:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	88fa      	ldrh	r2, [r7, #6]
 800279c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2221      	movs	r2, #33	; 0x21
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b0:	4a22      	ldr	r2, [pc, #136]	; (800283c <HAL_UART_Transmit_DMA+0xf0>)
 80027b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b8:	4a21      	ldr	r2, [pc, #132]	; (8002840 <HAL_UART_Transmit_DMA+0xf4>)
 80027ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c0:	4a20      	ldr	r2, [pc, #128]	; (8002844 <HAL_UART_Transmit_DMA+0xf8>)
 80027c2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c8:	2200      	movs	r2, #0
 80027ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80027cc:	f107 0308 	add.w	r3, r7, #8
 80027d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	6819      	ldr	r1, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	3304      	adds	r3, #4
 80027e0:	461a      	mov	r2, r3
 80027e2:	88fb      	ldrh	r3, [r7, #6]
 80027e4:	f7fe fe3a 	bl	800145c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027f0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	3314      	adds	r3, #20
 8002800:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	e853 3f00 	ldrex	r3, [r3]
 8002808:	617b      	str	r3, [r7, #20]
   return(result);
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002810:	62bb      	str	r3, [r7, #40]	; 0x28
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	3314      	adds	r3, #20
 8002818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800281a:	627a      	str	r2, [r7, #36]	; 0x24
 800281c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800281e:	6a39      	ldr	r1, [r7, #32]
 8002820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002822:	e841 2300 	strex	r3, r2, [r1]
 8002826:	61fb      	str	r3, [r7, #28]
   return(result);
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1e5      	bne.n	80027fa <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	e000      	b.n	8002834 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8002832:	2302      	movs	r3, #2
  }
}
 8002834:	4618      	mov	r0, r3
 8002836:	3730      	adds	r7, #48	; 0x30
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	08002911 	.word	0x08002911
 8002840:	080029ab 	.word	0x080029ab
 8002844:	08002b23 	.word	0x08002b23

08002848 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	4613      	mov	r3, r2
 8002854:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b20      	cmp	r3, #32
 8002860:	d11d      	bne.n	800289e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <HAL_UART_Receive_DMA+0x26>
 8002868:	88fb      	ldrh	r3, [r7, #6]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e016      	b.n	80028a0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_UART_Receive_DMA+0x38>
 800287c:	2302      	movs	r3, #2
 800287e:	e00f      	b.n	80028a0 <HAL_UART_Receive_DMA+0x58>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800288e:	88fb      	ldrh	r3, [r7, #6]
 8002890:	461a      	mov	r2, r3
 8002892:	68b9      	ldr	r1, [r7, #8]
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 f98f 	bl	8002bb8 <UART_Start_Receive_DMA>
 800289a:	4603      	mov	r3, r0
 800289c:	e000      	b.n	80028a0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800289e:	2302      	movs	r3, #2
  }
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b090      	sub	sp, #64	; 0x40
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002928:	2b00      	cmp	r3, #0
 800292a:	d137      	bne.n	800299c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800292c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800292e:	2200      	movs	r2, #0
 8002930:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	3314      	adds	r3, #20
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	e853 3f00 	ldrex	r3, [r3]
 8002940:	623b      	str	r3, [r7, #32]
   return(result);
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002948:	63bb      	str	r3, [r7, #56]	; 0x38
 800294a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	3314      	adds	r3, #20
 8002950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002952:	633a      	str	r2, [r7, #48]	; 0x30
 8002954:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002956:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800295a:	e841 2300 	strex	r3, r2, [r1]
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1e5      	bne.n	8002932 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	330c      	adds	r3, #12
 800296c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	e853 3f00 	ldrex	r3, [r3]
 8002974:	60fb      	str	r3, [r7, #12]
   return(result);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800297c:	637b      	str	r3, [r7, #52]	; 0x34
 800297e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	330c      	adds	r3, #12
 8002984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002986:	61fa      	str	r2, [r7, #28]
 8002988:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298a:	69b9      	ldr	r1, [r7, #24]
 800298c:	69fa      	ldr	r2, [r7, #28]
 800298e:	e841 2300 	strex	r3, r2, [r1]
 8002992:	617b      	str	r3, [r7, #20]
   return(result);
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1e5      	bne.n	8002966 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800299a:	e002      	b.n	80029a2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800299c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800299e:	f7ff ff83 	bl	80028a8 <HAL_UART_TxCpltCallback>
}
 80029a2:	bf00      	nop
 80029a4:	3740      	adds	r7, #64	; 0x40
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b084      	sub	sp, #16
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f7ff ff7f 	bl	80028bc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b09c      	sub	sp, #112	; 0x70
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d172      	bne.n	8002ac8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80029e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029e4:	2200      	movs	r2, #0
 80029e6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	330c      	adds	r3, #12
 80029ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f2:	e853 3f00 	ldrex	r3, [r3]
 80029f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80029f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	330c      	adds	r3, #12
 8002a06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002a08:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a0a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a10:	e841 2300 	strex	r3, r2, [r1]
 8002a14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1e5      	bne.n	80029e8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	3314      	adds	r3, #20
 8002a22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a26:	e853 3f00 	ldrex	r3, [r3]
 8002a2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a2e:	f023 0301 	bic.w	r3, r3, #1
 8002a32:	667b      	str	r3, [r7, #100]	; 0x64
 8002a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	3314      	adds	r3, #20
 8002a3a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002a3c:	647a      	str	r2, [r7, #68]	; 0x44
 8002a3e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a44:	e841 2300 	strex	r3, r2, [r1]
 8002a48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1e5      	bne.n	8002a1c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	3314      	adds	r3, #20
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	e853 3f00 	ldrex	r3, [r3]
 8002a5e:	623b      	str	r3, [r7, #32]
   return(result);
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a66:	663b      	str	r3, [r7, #96]	; 0x60
 8002a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	3314      	adds	r3, #20
 8002a6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a70:	633a      	str	r2, [r7, #48]	; 0x30
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a78:	e841 2300 	strex	r3, r2, [r1]
 8002a7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1e5      	bne.n	8002a50 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d119      	bne.n	8002ac8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	330c      	adds	r3, #12
 8002a9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	e853 3f00 	ldrex	r3, [r3]
 8002aa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f023 0310 	bic.w	r3, r3, #16
 8002aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	330c      	adds	r3, #12
 8002ab2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ab4:	61fa      	str	r2, [r7, #28]
 8002ab6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab8:	69b9      	ldr	r1, [r7, #24]
 8002aba:	69fa      	ldr	r2, [r7, #28]
 8002abc:	e841 2300 	strex	r3, r2, [r1]
 8002ac0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1e5      	bne.n	8002a94 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d106      	bne.n	8002ade <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002ad8:	f7ff ff0e 	bl	80028f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002adc:	e002      	b.n	8002ae4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002ade:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002ae0:	f7fd feb8 	bl	8000854 <HAL_UART_RxCpltCallback>
}
 8002ae4:	bf00      	nop
 8002ae6:	3770      	adds	r7, #112	; 0x70
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d108      	bne.n	8002b14 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b06:	085b      	lsrs	r3, r3, #1
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f7ff fef3 	bl	80028f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002b12:	e002      	b.n	8002b1a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f7ff fedb 	bl	80028d0 <HAL_UART_RxHalfCpltCallback>
}
 8002b1a:	bf00      	nop
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b32:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3e:	2b80      	cmp	r3, #128	; 0x80
 8002b40:	bf0c      	ite	eq
 8002b42:	2301      	moveq	r3, #1
 8002b44:	2300      	movne	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b21      	cmp	r3, #33	; 0x21
 8002b54:	d108      	bne.n	8002b68 <UART_DMAError+0x46>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002b62:	68b8      	ldr	r0, [r7, #8]
 8002b64:	f000 f8c6 	bl	8002cf4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b72:	2b40      	cmp	r3, #64	; 0x40
 8002b74:	bf0c      	ite	eq
 8002b76:	2301      	moveq	r3, #1
 8002b78:	2300      	movne	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b22      	cmp	r3, #34	; 0x22
 8002b88:	d108      	bne.n	8002b9c <UART_DMAError+0x7a>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2200      	movs	r2, #0
 8002b94:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002b96:	68b8      	ldr	r0, [r7, #8]
 8002b98:	f000 f8d4 	bl	8002d44 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	f043 0210 	orr.w	r2, r3, #16
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ba8:	68b8      	ldr	r0, [r7, #8]
 8002baa:	f7ff fe9b 	bl	80028e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bae:	bf00      	nop
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b098      	sub	sp, #96	; 0x60
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	88fa      	ldrh	r2, [r7, #6]
 8002bd0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2222      	movs	r2, #34	; 0x22
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be4:	4a40      	ldr	r2, [pc, #256]	; (8002ce8 <UART_Start_Receive_DMA+0x130>)
 8002be6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bec:	4a3f      	ldr	r2, [pc, #252]	; (8002cec <UART_Start_Receive_DMA+0x134>)
 8002bee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf4:	4a3e      	ldr	r2, [pc, #248]	; (8002cf0 <UART_Start_Receive_DMA+0x138>)
 8002bf6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002c00:	f107 0308 	add.w	r3, r7, #8
 8002c04:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	3304      	adds	r3, #4
 8002c10:	4619      	mov	r1, r3
 8002c12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	f7fe fc20 	bl	800145c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	613b      	str	r3, [r7, #16]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d019      	beq.n	8002c76 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	330c      	adds	r3, #12
 8002c48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c4c:	e853 3f00 	ldrex	r3, [r3]
 8002c50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c58:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	330c      	adds	r3, #12
 8002c60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c62:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002c64:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c66:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002c68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c6a:	e841 2300 	strex	r3, r2, [r1]
 8002c6e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1e5      	bne.n	8002c42 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	3314      	adds	r3, #20
 8002c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c80:	e853 3f00 	ldrex	r3, [r3]
 8002c84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	657b      	str	r3, [r7, #84]	; 0x54
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	3314      	adds	r3, #20
 8002c94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c96:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c9e:	e841 2300 	strex	r3, r2, [r1]
 8002ca2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1e5      	bne.n	8002c76 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	3314      	adds	r3, #20
 8002cb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	e853 3f00 	ldrex	r3, [r3]
 8002cb8:	617b      	str	r3, [r7, #20]
   return(result);
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cc0:	653b      	str	r3, [r7, #80]	; 0x50
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	3314      	adds	r3, #20
 8002cc8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002cca:	627a      	str	r2, [r7, #36]	; 0x24
 8002ccc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cce:	6a39      	ldr	r1, [r7, #32]
 8002cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd2:	e841 2300 	strex	r3, r2, [r1]
 8002cd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1e5      	bne.n	8002caa <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3760      	adds	r7, #96	; 0x60
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	080029c7 	.word	0x080029c7
 8002cec:	08002aed 	.word	0x08002aed
 8002cf0:	08002b23 	.word	0x08002b23

08002cf4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b089      	sub	sp, #36	; 0x24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	330c      	adds	r3, #12
 8002d02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	e853 3f00 	ldrex	r3, [r3]
 8002d0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002d12:	61fb      	str	r3, [r7, #28]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	330c      	adds	r3, #12
 8002d1a:	69fa      	ldr	r2, [r7, #28]
 8002d1c:	61ba      	str	r2, [r7, #24]
 8002d1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d20:	6979      	ldr	r1, [r7, #20]
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	e841 2300 	strex	r3, r2, [r1]
 8002d28:	613b      	str	r3, [r7, #16]
   return(result);
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1e5      	bne.n	8002cfc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002d38:	bf00      	nop
 8002d3a:	3724      	adds	r7, #36	; 0x24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b095      	sub	sp, #84	; 0x54
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	330c      	adds	r3, #12
 8002d52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d56:	e853 3f00 	ldrex	r3, [r3]
 8002d5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	330c      	adds	r3, #12
 8002d6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d6c:	643a      	str	r2, [r7, #64]	; 0x40
 8002d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d74:	e841 2300 	strex	r3, r2, [r1]
 8002d78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1e5      	bne.n	8002d4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	3314      	adds	r3, #20
 8002d86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	e853 3f00 	ldrex	r3, [r3]
 8002d8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f023 0301 	bic.w	r3, r3, #1
 8002d96:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	3314      	adds	r3, #20
 8002d9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002da0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002da2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002da6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002da8:	e841 2300 	strex	r3, r2, [r1]
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1e5      	bne.n	8002d80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d119      	bne.n	8002df0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	330c      	adds	r3, #12
 8002dc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	e853 3f00 	ldrex	r3, [r3]
 8002dca:	60bb      	str	r3, [r7, #8]
   return(result);
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f023 0310 	bic.w	r3, r3, #16
 8002dd2:	647b      	str	r3, [r7, #68]	; 0x44
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	330c      	adds	r3, #12
 8002dda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ddc:	61ba      	str	r2, [r7, #24]
 8002dde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de0:	6979      	ldr	r1, [r7, #20]
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	e841 2300 	strex	r3, r2, [r1]
 8002de8:	613b      	str	r3, [r7, #16]
   return(result);
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1e5      	bne.n	8002dbc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2220      	movs	r2, #32
 8002df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002dfe:	bf00      	nop
 8002e00:	3754      	adds	r7, #84	; 0x54
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
	...

08002e0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e10:	b0c0      	sub	sp, #256	; 0x100
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e28:	68d9      	ldr	r1, [r3, #12]
 8002e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	ea40 0301 	orr.w	r3, r0, r1
 8002e34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e64:	f021 010c 	bic.w	r1, r1, #12
 8002e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e72:	430b      	orrs	r3, r1
 8002e74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e86:	6999      	ldr	r1, [r3, #24]
 8002e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	ea40 0301 	orr.w	r3, r0, r1
 8002e92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	4b8f      	ldr	r3, [pc, #572]	; (80030d8 <UART_SetConfig+0x2cc>)
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d005      	beq.n	8002eac <UART_SetConfig+0xa0>
 8002ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	4b8d      	ldr	r3, [pc, #564]	; (80030dc <UART_SetConfig+0x2d0>)
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d104      	bne.n	8002eb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002eac:	f7ff fbec 	bl	8002688 <HAL_RCC_GetPCLK2Freq>
 8002eb0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002eb4:	e003      	b.n	8002ebe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002eb6:	f7ff fbd3 	bl	8002660 <HAL_RCC_GetPCLK1Freq>
 8002eba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ec8:	f040 810c 	bne.w	80030e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ed6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002eda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ede:	4622      	mov	r2, r4
 8002ee0:	462b      	mov	r3, r5
 8002ee2:	1891      	adds	r1, r2, r2
 8002ee4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ee6:	415b      	adcs	r3, r3
 8002ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002eea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002eee:	4621      	mov	r1, r4
 8002ef0:	eb12 0801 	adds.w	r8, r2, r1
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	eb43 0901 	adc.w	r9, r3, r1
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	f04f 0300 	mov.w	r3, #0
 8002f02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f0e:	4690      	mov	r8, r2
 8002f10:	4699      	mov	r9, r3
 8002f12:	4623      	mov	r3, r4
 8002f14:	eb18 0303 	adds.w	r3, r8, r3
 8002f18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f1c:	462b      	mov	r3, r5
 8002f1e:	eb49 0303 	adc.w	r3, r9, r3
 8002f22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	18db      	adds	r3, r3, r3
 8002f3e:	653b      	str	r3, [r7, #80]	; 0x50
 8002f40:	4613      	mov	r3, r2
 8002f42:	eb42 0303 	adc.w	r3, r2, r3
 8002f46:	657b      	str	r3, [r7, #84]	; 0x54
 8002f48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f50:	f7fd f99e 	bl	8000290 <__aeabi_uldivmod>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4b61      	ldr	r3, [pc, #388]	; (80030e0 <UART_SetConfig+0x2d4>)
 8002f5a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	011c      	lsls	r4, r3, #4
 8002f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f66:	2200      	movs	r2, #0
 8002f68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f74:	4642      	mov	r2, r8
 8002f76:	464b      	mov	r3, r9
 8002f78:	1891      	adds	r1, r2, r2
 8002f7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f7c:	415b      	adcs	r3, r3
 8002f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f84:	4641      	mov	r1, r8
 8002f86:	eb12 0a01 	adds.w	sl, r2, r1
 8002f8a:	4649      	mov	r1, r9
 8002f8c:	eb43 0b01 	adc.w	fp, r3, r1
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fa4:	4692      	mov	sl, r2
 8002fa6:	469b      	mov	fp, r3
 8002fa8:	4643      	mov	r3, r8
 8002faa:	eb1a 0303 	adds.w	r3, sl, r3
 8002fae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fb2:	464b      	mov	r3, r9
 8002fb4:	eb4b 0303 	adc.w	r3, fp, r3
 8002fb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fc8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002fcc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	18db      	adds	r3, r3, r3
 8002fd4:	643b      	str	r3, [r7, #64]	; 0x40
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	eb42 0303 	adc.w	r3, r2, r3
 8002fdc:	647b      	str	r3, [r7, #68]	; 0x44
 8002fde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fe2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002fe6:	f7fd f953 	bl	8000290 <__aeabi_uldivmod>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4611      	mov	r1, r2
 8002ff0:	4b3b      	ldr	r3, [pc, #236]	; (80030e0 <UART_SetConfig+0x2d4>)
 8002ff2:	fba3 2301 	umull	r2, r3, r3, r1
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	2264      	movs	r2, #100	; 0x64
 8002ffa:	fb02 f303 	mul.w	r3, r2, r3
 8002ffe:	1acb      	subs	r3, r1, r3
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003006:	4b36      	ldr	r3, [pc, #216]	; (80030e0 <UART_SetConfig+0x2d4>)
 8003008:	fba3 2302 	umull	r2, r3, r3, r2
 800300c:	095b      	lsrs	r3, r3, #5
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003014:	441c      	add	r4, r3
 8003016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800301a:	2200      	movs	r2, #0
 800301c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003020:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003024:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003028:	4642      	mov	r2, r8
 800302a:	464b      	mov	r3, r9
 800302c:	1891      	adds	r1, r2, r2
 800302e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003030:	415b      	adcs	r3, r3
 8003032:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003034:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003038:	4641      	mov	r1, r8
 800303a:	1851      	adds	r1, r2, r1
 800303c:	6339      	str	r1, [r7, #48]	; 0x30
 800303e:	4649      	mov	r1, r9
 8003040:	414b      	adcs	r3, r1
 8003042:	637b      	str	r3, [r7, #52]	; 0x34
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003050:	4659      	mov	r1, fp
 8003052:	00cb      	lsls	r3, r1, #3
 8003054:	4651      	mov	r1, sl
 8003056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800305a:	4651      	mov	r1, sl
 800305c:	00ca      	lsls	r2, r1, #3
 800305e:	4610      	mov	r0, r2
 8003060:	4619      	mov	r1, r3
 8003062:	4603      	mov	r3, r0
 8003064:	4642      	mov	r2, r8
 8003066:	189b      	adds	r3, r3, r2
 8003068:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800306c:	464b      	mov	r3, r9
 800306e:	460a      	mov	r2, r1
 8003070:	eb42 0303 	adc.w	r3, r2, r3
 8003074:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003084:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003088:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800308c:	460b      	mov	r3, r1
 800308e:	18db      	adds	r3, r3, r3
 8003090:	62bb      	str	r3, [r7, #40]	; 0x28
 8003092:	4613      	mov	r3, r2
 8003094:	eb42 0303 	adc.w	r3, r2, r3
 8003098:	62fb      	str	r3, [r7, #44]	; 0x2c
 800309a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800309e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030a2:	f7fd f8f5 	bl	8000290 <__aeabi_uldivmod>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	4b0d      	ldr	r3, [pc, #52]	; (80030e0 <UART_SetConfig+0x2d4>)
 80030ac:	fba3 1302 	umull	r1, r3, r3, r2
 80030b0:	095b      	lsrs	r3, r3, #5
 80030b2:	2164      	movs	r1, #100	; 0x64
 80030b4:	fb01 f303 	mul.w	r3, r1, r3
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	3332      	adds	r3, #50	; 0x32
 80030be:	4a08      	ldr	r2, [pc, #32]	; (80030e0 <UART_SetConfig+0x2d4>)
 80030c0:	fba2 2303 	umull	r2, r3, r2, r3
 80030c4:	095b      	lsrs	r3, r3, #5
 80030c6:	f003 0207 	and.w	r2, r3, #7
 80030ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4422      	add	r2, r4
 80030d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030d4:	e105      	b.n	80032e2 <UART_SetConfig+0x4d6>
 80030d6:	bf00      	nop
 80030d8:	40011000 	.word	0x40011000
 80030dc:	40011400 	.word	0x40011400
 80030e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030e8:	2200      	movs	r2, #0
 80030ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80030ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80030f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80030f6:	4642      	mov	r2, r8
 80030f8:	464b      	mov	r3, r9
 80030fa:	1891      	adds	r1, r2, r2
 80030fc:	6239      	str	r1, [r7, #32]
 80030fe:	415b      	adcs	r3, r3
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
 8003102:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003106:	4641      	mov	r1, r8
 8003108:	1854      	adds	r4, r2, r1
 800310a:	4649      	mov	r1, r9
 800310c:	eb43 0501 	adc.w	r5, r3, r1
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	00eb      	lsls	r3, r5, #3
 800311a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800311e:	00e2      	lsls	r2, r4, #3
 8003120:	4614      	mov	r4, r2
 8003122:	461d      	mov	r5, r3
 8003124:	4643      	mov	r3, r8
 8003126:	18e3      	adds	r3, r4, r3
 8003128:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800312c:	464b      	mov	r3, r9
 800312e:	eb45 0303 	adc.w	r3, r5, r3
 8003132:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003142:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003152:	4629      	mov	r1, r5
 8003154:	008b      	lsls	r3, r1, #2
 8003156:	4621      	mov	r1, r4
 8003158:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800315c:	4621      	mov	r1, r4
 800315e:	008a      	lsls	r2, r1, #2
 8003160:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003164:	f7fd f894 	bl	8000290 <__aeabi_uldivmod>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4b60      	ldr	r3, [pc, #384]	; (80032f0 <UART_SetConfig+0x4e4>)
 800316e:	fba3 2302 	umull	r2, r3, r3, r2
 8003172:	095b      	lsrs	r3, r3, #5
 8003174:	011c      	lsls	r4, r3, #4
 8003176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800317a:	2200      	movs	r2, #0
 800317c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003180:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003184:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003188:	4642      	mov	r2, r8
 800318a:	464b      	mov	r3, r9
 800318c:	1891      	adds	r1, r2, r2
 800318e:	61b9      	str	r1, [r7, #24]
 8003190:	415b      	adcs	r3, r3
 8003192:	61fb      	str	r3, [r7, #28]
 8003194:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003198:	4641      	mov	r1, r8
 800319a:	1851      	adds	r1, r2, r1
 800319c:	6139      	str	r1, [r7, #16]
 800319e:	4649      	mov	r1, r9
 80031a0:	414b      	adcs	r3, r1
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031b0:	4659      	mov	r1, fp
 80031b2:	00cb      	lsls	r3, r1, #3
 80031b4:	4651      	mov	r1, sl
 80031b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ba:	4651      	mov	r1, sl
 80031bc:	00ca      	lsls	r2, r1, #3
 80031be:	4610      	mov	r0, r2
 80031c0:	4619      	mov	r1, r3
 80031c2:	4603      	mov	r3, r0
 80031c4:	4642      	mov	r2, r8
 80031c6:	189b      	adds	r3, r3, r2
 80031c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031cc:	464b      	mov	r3, r9
 80031ce:	460a      	mov	r2, r1
 80031d0:	eb42 0303 	adc.w	r3, r2, r3
 80031d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80031e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80031f0:	4649      	mov	r1, r9
 80031f2:	008b      	lsls	r3, r1, #2
 80031f4:	4641      	mov	r1, r8
 80031f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031fa:	4641      	mov	r1, r8
 80031fc:	008a      	lsls	r2, r1, #2
 80031fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003202:	f7fd f845 	bl	8000290 <__aeabi_uldivmod>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	4b39      	ldr	r3, [pc, #228]	; (80032f0 <UART_SetConfig+0x4e4>)
 800320c:	fba3 1302 	umull	r1, r3, r3, r2
 8003210:	095b      	lsrs	r3, r3, #5
 8003212:	2164      	movs	r1, #100	; 0x64
 8003214:	fb01 f303 	mul.w	r3, r1, r3
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	3332      	adds	r3, #50	; 0x32
 800321e:	4a34      	ldr	r2, [pc, #208]	; (80032f0 <UART_SetConfig+0x4e4>)
 8003220:	fba2 2303 	umull	r2, r3, r2, r3
 8003224:	095b      	lsrs	r3, r3, #5
 8003226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800322a:	441c      	add	r4, r3
 800322c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003230:	2200      	movs	r2, #0
 8003232:	673b      	str	r3, [r7, #112]	; 0x70
 8003234:	677a      	str	r2, [r7, #116]	; 0x74
 8003236:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800323a:	4642      	mov	r2, r8
 800323c:	464b      	mov	r3, r9
 800323e:	1891      	adds	r1, r2, r2
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	415b      	adcs	r3, r3
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800324a:	4641      	mov	r1, r8
 800324c:	1851      	adds	r1, r2, r1
 800324e:	6039      	str	r1, [r7, #0]
 8003250:	4649      	mov	r1, r9
 8003252:	414b      	adcs	r3, r1
 8003254:	607b      	str	r3, [r7, #4]
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003262:	4659      	mov	r1, fp
 8003264:	00cb      	lsls	r3, r1, #3
 8003266:	4651      	mov	r1, sl
 8003268:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800326c:	4651      	mov	r1, sl
 800326e:	00ca      	lsls	r2, r1, #3
 8003270:	4610      	mov	r0, r2
 8003272:	4619      	mov	r1, r3
 8003274:	4603      	mov	r3, r0
 8003276:	4642      	mov	r2, r8
 8003278:	189b      	adds	r3, r3, r2
 800327a:	66bb      	str	r3, [r7, #104]	; 0x68
 800327c:	464b      	mov	r3, r9
 800327e:	460a      	mov	r2, r1
 8003280:	eb42 0303 	adc.w	r3, r2, r3
 8003284:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	663b      	str	r3, [r7, #96]	; 0x60
 8003290:	667a      	str	r2, [r7, #100]	; 0x64
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	f04f 0300 	mov.w	r3, #0
 800329a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800329e:	4649      	mov	r1, r9
 80032a0:	008b      	lsls	r3, r1, #2
 80032a2:	4641      	mov	r1, r8
 80032a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032a8:	4641      	mov	r1, r8
 80032aa:	008a      	lsls	r2, r1, #2
 80032ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032b0:	f7fc ffee 	bl	8000290 <__aeabi_uldivmod>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	4b0d      	ldr	r3, [pc, #52]	; (80032f0 <UART_SetConfig+0x4e4>)
 80032ba:	fba3 1302 	umull	r1, r3, r3, r2
 80032be:	095b      	lsrs	r3, r3, #5
 80032c0:	2164      	movs	r1, #100	; 0x64
 80032c2:	fb01 f303 	mul.w	r3, r1, r3
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	3332      	adds	r3, #50	; 0x32
 80032cc:	4a08      	ldr	r2, [pc, #32]	; (80032f0 <UART_SetConfig+0x4e4>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	f003 020f 	and.w	r2, r3, #15
 80032d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4422      	add	r2, r4
 80032e0:	609a      	str	r2, [r3, #8]
}
 80032e2:	bf00      	nop
 80032e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80032e8:	46bd      	mov	sp, r7
 80032ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ee:	bf00      	nop
 80032f0:	51eb851f 	.word	0x51eb851f

080032f4 <__errno>:
 80032f4:	4b01      	ldr	r3, [pc, #4]	; (80032fc <__errno+0x8>)
 80032f6:	6818      	ldr	r0, [r3, #0]
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	20000014 	.word	0x20000014

08003300 <__libc_init_array>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	4d0d      	ldr	r5, [pc, #52]	; (8003338 <__libc_init_array+0x38>)
 8003304:	4c0d      	ldr	r4, [pc, #52]	; (800333c <__libc_init_array+0x3c>)
 8003306:	1b64      	subs	r4, r4, r5
 8003308:	10a4      	asrs	r4, r4, #2
 800330a:	2600      	movs	r6, #0
 800330c:	42a6      	cmp	r6, r4
 800330e:	d109      	bne.n	8003324 <__libc_init_array+0x24>
 8003310:	4d0b      	ldr	r5, [pc, #44]	; (8003340 <__libc_init_array+0x40>)
 8003312:	4c0c      	ldr	r4, [pc, #48]	; (8003344 <__libc_init_array+0x44>)
 8003314:	f000 fc8e 	bl	8003c34 <_init>
 8003318:	1b64      	subs	r4, r4, r5
 800331a:	10a4      	asrs	r4, r4, #2
 800331c:	2600      	movs	r6, #0
 800331e:	42a6      	cmp	r6, r4
 8003320:	d105      	bne.n	800332e <__libc_init_array+0x2e>
 8003322:	bd70      	pop	{r4, r5, r6, pc}
 8003324:	f855 3b04 	ldr.w	r3, [r5], #4
 8003328:	4798      	blx	r3
 800332a:	3601      	adds	r6, #1
 800332c:	e7ee      	b.n	800330c <__libc_init_array+0xc>
 800332e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003332:	4798      	blx	r3
 8003334:	3601      	adds	r6, #1
 8003336:	e7f2      	b.n	800331e <__libc_init_array+0x1e>
 8003338:	08003d70 	.word	0x08003d70
 800333c:	08003d70 	.word	0x08003d70
 8003340:	08003d70 	.word	0x08003d70
 8003344:	08003d74 	.word	0x08003d74

08003348 <memset>:
 8003348:	4402      	add	r2, r0
 800334a:	4603      	mov	r3, r0
 800334c:	4293      	cmp	r3, r2
 800334e:	d100      	bne.n	8003352 <memset+0xa>
 8003350:	4770      	bx	lr
 8003352:	f803 1b01 	strb.w	r1, [r3], #1
 8003356:	e7f9      	b.n	800334c <memset+0x4>

08003358 <siprintf>:
 8003358:	b40e      	push	{r1, r2, r3}
 800335a:	b500      	push	{lr}
 800335c:	b09c      	sub	sp, #112	; 0x70
 800335e:	ab1d      	add	r3, sp, #116	; 0x74
 8003360:	9002      	str	r0, [sp, #8]
 8003362:	9006      	str	r0, [sp, #24]
 8003364:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003368:	4809      	ldr	r0, [pc, #36]	; (8003390 <siprintf+0x38>)
 800336a:	9107      	str	r1, [sp, #28]
 800336c:	9104      	str	r1, [sp, #16]
 800336e:	4909      	ldr	r1, [pc, #36]	; (8003394 <siprintf+0x3c>)
 8003370:	f853 2b04 	ldr.w	r2, [r3], #4
 8003374:	9105      	str	r1, [sp, #20]
 8003376:	6800      	ldr	r0, [r0, #0]
 8003378:	9301      	str	r3, [sp, #4]
 800337a:	a902      	add	r1, sp, #8
 800337c:	f000 f868 	bl	8003450 <_svfiprintf_r>
 8003380:	9b02      	ldr	r3, [sp, #8]
 8003382:	2200      	movs	r2, #0
 8003384:	701a      	strb	r2, [r3, #0]
 8003386:	b01c      	add	sp, #112	; 0x70
 8003388:	f85d eb04 	ldr.w	lr, [sp], #4
 800338c:	b003      	add	sp, #12
 800338e:	4770      	bx	lr
 8003390:	20000014 	.word	0x20000014
 8003394:	ffff0208 	.word	0xffff0208

08003398 <__ssputs_r>:
 8003398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800339c:	688e      	ldr	r6, [r1, #8]
 800339e:	429e      	cmp	r6, r3
 80033a0:	4682      	mov	sl, r0
 80033a2:	460c      	mov	r4, r1
 80033a4:	4690      	mov	r8, r2
 80033a6:	461f      	mov	r7, r3
 80033a8:	d838      	bhi.n	800341c <__ssputs_r+0x84>
 80033aa:	898a      	ldrh	r2, [r1, #12]
 80033ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033b0:	d032      	beq.n	8003418 <__ssputs_r+0x80>
 80033b2:	6825      	ldr	r5, [r4, #0]
 80033b4:	6909      	ldr	r1, [r1, #16]
 80033b6:	eba5 0901 	sub.w	r9, r5, r1
 80033ba:	6965      	ldr	r5, [r4, #20]
 80033bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80033c4:	3301      	adds	r3, #1
 80033c6:	444b      	add	r3, r9
 80033c8:	106d      	asrs	r5, r5, #1
 80033ca:	429d      	cmp	r5, r3
 80033cc:	bf38      	it	cc
 80033ce:	461d      	movcc	r5, r3
 80033d0:	0553      	lsls	r3, r2, #21
 80033d2:	d531      	bpl.n	8003438 <__ssputs_r+0xa0>
 80033d4:	4629      	mov	r1, r5
 80033d6:	f000 fb63 	bl	8003aa0 <_malloc_r>
 80033da:	4606      	mov	r6, r0
 80033dc:	b950      	cbnz	r0, 80033f4 <__ssputs_r+0x5c>
 80033de:	230c      	movs	r3, #12
 80033e0:	f8ca 3000 	str.w	r3, [sl]
 80033e4:	89a3      	ldrh	r3, [r4, #12]
 80033e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033ea:	81a3      	strh	r3, [r4, #12]
 80033ec:	f04f 30ff 	mov.w	r0, #4294967295
 80033f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033f4:	6921      	ldr	r1, [r4, #16]
 80033f6:	464a      	mov	r2, r9
 80033f8:	f000 fabe 	bl	8003978 <memcpy>
 80033fc:	89a3      	ldrh	r3, [r4, #12]
 80033fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003406:	81a3      	strh	r3, [r4, #12]
 8003408:	6126      	str	r6, [r4, #16]
 800340a:	6165      	str	r5, [r4, #20]
 800340c:	444e      	add	r6, r9
 800340e:	eba5 0509 	sub.w	r5, r5, r9
 8003412:	6026      	str	r6, [r4, #0]
 8003414:	60a5      	str	r5, [r4, #8]
 8003416:	463e      	mov	r6, r7
 8003418:	42be      	cmp	r6, r7
 800341a:	d900      	bls.n	800341e <__ssputs_r+0x86>
 800341c:	463e      	mov	r6, r7
 800341e:	6820      	ldr	r0, [r4, #0]
 8003420:	4632      	mov	r2, r6
 8003422:	4641      	mov	r1, r8
 8003424:	f000 fab6 	bl	8003994 <memmove>
 8003428:	68a3      	ldr	r3, [r4, #8]
 800342a:	1b9b      	subs	r3, r3, r6
 800342c:	60a3      	str	r3, [r4, #8]
 800342e:	6823      	ldr	r3, [r4, #0]
 8003430:	4433      	add	r3, r6
 8003432:	6023      	str	r3, [r4, #0]
 8003434:	2000      	movs	r0, #0
 8003436:	e7db      	b.n	80033f0 <__ssputs_r+0x58>
 8003438:	462a      	mov	r2, r5
 800343a:	f000 fba5 	bl	8003b88 <_realloc_r>
 800343e:	4606      	mov	r6, r0
 8003440:	2800      	cmp	r0, #0
 8003442:	d1e1      	bne.n	8003408 <__ssputs_r+0x70>
 8003444:	6921      	ldr	r1, [r4, #16]
 8003446:	4650      	mov	r0, sl
 8003448:	f000 fabe 	bl	80039c8 <_free_r>
 800344c:	e7c7      	b.n	80033de <__ssputs_r+0x46>
	...

08003450 <_svfiprintf_r>:
 8003450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003454:	4698      	mov	r8, r3
 8003456:	898b      	ldrh	r3, [r1, #12]
 8003458:	061b      	lsls	r3, r3, #24
 800345a:	b09d      	sub	sp, #116	; 0x74
 800345c:	4607      	mov	r7, r0
 800345e:	460d      	mov	r5, r1
 8003460:	4614      	mov	r4, r2
 8003462:	d50e      	bpl.n	8003482 <_svfiprintf_r+0x32>
 8003464:	690b      	ldr	r3, [r1, #16]
 8003466:	b963      	cbnz	r3, 8003482 <_svfiprintf_r+0x32>
 8003468:	2140      	movs	r1, #64	; 0x40
 800346a:	f000 fb19 	bl	8003aa0 <_malloc_r>
 800346e:	6028      	str	r0, [r5, #0]
 8003470:	6128      	str	r0, [r5, #16]
 8003472:	b920      	cbnz	r0, 800347e <_svfiprintf_r+0x2e>
 8003474:	230c      	movs	r3, #12
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	f04f 30ff 	mov.w	r0, #4294967295
 800347c:	e0d1      	b.n	8003622 <_svfiprintf_r+0x1d2>
 800347e:	2340      	movs	r3, #64	; 0x40
 8003480:	616b      	str	r3, [r5, #20]
 8003482:	2300      	movs	r3, #0
 8003484:	9309      	str	r3, [sp, #36]	; 0x24
 8003486:	2320      	movs	r3, #32
 8003488:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800348c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003490:	2330      	movs	r3, #48	; 0x30
 8003492:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800363c <_svfiprintf_r+0x1ec>
 8003496:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800349a:	f04f 0901 	mov.w	r9, #1
 800349e:	4623      	mov	r3, r4
 80034a0:	469a      	mov	sl, r3
 80034a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034a6:	b10a      	cbz	r2, 80034ac <_svfiprintf_r+0x5c>
 80034a8:	2a25      	cmp	r2, #37	; 0x25
 80034aa:	d1f9      	bne.n	80034a0 <_svfiprintf_r+0x50>
 80034ac:	ebba 0b04 	subs.w	fp, sl, r4
 80034b0:	d00b      	beq.n	80034ca <_svfiprintf_r+0x7a>
 80034b2:	465b      	mov	r3, fp
 80034b4:	4622      	mov	r2, r4
 80034b6:	4629      	mov	r1, r5
 80034b8:	4638      	mov	r0, r7
 80034ba:	f7ff ff6d 	bl	8003398 <__ssputs_r>
 80034be:	3001      	adds	r0, #1
 80034c0:	f000 80aa 	beq.w	8003618 <_svfiprintf_r+0x1c8>
 80034c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034c6:	445a      	add	r2, fp
 80034c8:	9209      	str	r2, [sp, #36]	; 0x24
 80034ca:	f89a 3000 	ldrb.w	r3, [sl]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 80a2 	beq.w	8003618 <_svfiprintf_r+0x1c8>
 80034d4:	2300      	movs	r3, #0
 80034d6:	f04f 32ff 	mov.w	r2, #4294967295
 80034da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034de:	f10a 0a01 	add.w	sl, sl, #1
 80034e2:	9304      	str	r3, [sp, #16]
 80034e4:	9307      	str	r3, [sp, #28]
 80034e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034ea:	931a      	str	r3, [sp, #104]	; 0x68
 80034ec:	4654      	mov	r4, sl
 80034ee:	2205      	movs	r2, #5
 80034f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034f4:	4851      	ldr	r0, [pc, #324]	; (800363c <_svfiprintf_r+0x1ec>)
 80034f6:	f7fc fe7b 	bl	80001f0 <memchr>
 80034fa:	9a04      	ldr	r2, [sp, #16]
 80034fc:	b9d8      	cbnz	r0, 8003536 <_svfiprintf_r+0xe6>
 80034fe:	06d0      	lsls	r0, r2, #27
 8003500:	bf44      	itt	mi
 8003502:	2320      	movmi	r3, #32
 8003504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003508:	0711      	lsls	r1, r2, #28
 800350a:	bf44      	itt	mi
 800350c:	232b      	movmi	r3, #43	; 0x2b
 800350e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003512:	f89a 3000 	ldrb.w	r3, [sl]
 8003516:	2b2a      	cmp	r3, #42	; 0x2a
 8003518:	d015      	beq.n	8003546 <_svfiprintf_r+0xf6>
 800351a:	9a07      	ldr	r2, [sp, #28]
 800351c:	4654      	mov	r4, sl
 800351e:	2000      	movs	r0, #0
 8003520:	f04f 0c0a 	mov.w	ip, #10
 8003524:	4621      	mov	r1, r4
 8003526:	f811 3b01 	ldrb.w	r3, [r1], #1
 800352a:	3b30      	subs	r3, #48	; 0x30
 800352c:	2b09      	cmp	r3, #9
 800352e:	d94e      	bls.n	80035ce <_svfiprintf_r+0x17e>
 8003530:	b1b0      	cbz	r0, 8003560 <_svfiprintf_r+0x110>
 8003532:	9207      	str	r2, [sp, #28]
 8003534:	e014      	b.n	8003560 <_svfiprintf_r+0x110>
 8003536:	eba0 0308 	sub.w	r3, r0, r8
 800353a:	fa09 f303 	lsl.w	r3, r9, r3
 800353e:	4313      	orrs	r3, r2
 8003540:	9304      	str	r3, [sp, #16]
 8003542:	46a2      	mov	sl, r4
 8003544:	e7d2      	b.n	80034ec <_svfiprintf_r+0x9c>
 8003546:	9b03      	ldr	r3, [sp, #12]
 8003548:	1d19      	adds	r1, r3, #4
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	9103      	str	r1, [sp, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	bfbb      	ittet	lt
 8003552:	425b      	neglt	r3, r3
 8003554:	f042 0202 	orrlt.w	r2, r2, #2
 8003558:	9307      	strge	r3, [sp, #28]
 800355a:	9307      	strlt	r3, [sp, #28]
 800355c:	bfb8      	it	lt
 800355e:	9204      	strlt	r2, [sp, #16]
 8003560:	7823      	ldrb	r3, [r4, #0]
 8003562:	2b2e      	cmp	r3, #46	; 0x2e
 8003564:	d10c      	bne.n	8003580 <_svfiprintf_r+0x130>
 8003566:	7863      	ldrb	r3, [r4, #1]
 8003568:	2b2a      	cmp	r3, #42	; 0x2a
 800356a:	d135      	bne.n	80035d8 <_svfiprintf_r+0x188>
 800356c:	9b03      	ldr	r3, [sp, #12]
 800356e:	1d1a      	adds	r2, r3, #4
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	9203      	str	r2, [sp, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	bfb8      	it	lt
 8003578:	f04f 33ff 	movlt.w	r3, #4294967295
 800357c:	3402      	adds	r4, #2
 800357e:	9305      	str	r3, [sp, #20]
 8003580:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800364c <_svfiprintf_r+0x1fc>
 8003584:	7821      	ldrb	r1, [r4, #0]
 8003586:	2203      	movs	r2, #3
 8003588:	4650      	mov	r0, sl
 800358a:	f7fc fe31 	bl	80001f0 <memchr>
 800358e:	b140      	cbz	r0, 80035a2 <_svfiprintf_r+0x152>
 8003590:	2340      	movs	r3, #64	; 0x40
 8003592:	eba0 000a 	sub.w	r0, r0, sl
 8003596:	fa03 f000 	lsl.w	r0, r3, r0
 800359a:	9b04      	ldr	r3, [sp, #16]
 800359c:	4303      	orrs	r3, r0
 800359e:	3401      	adds	r4, #1
 80035a0:	9304      	str	r3, [sp, #16]
 80035a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035a6:	4826      	ldr	r0, [pc, #152]	; (8003640 <_svfiprintf_r+0x1f0>)
 80035a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035ac:	2206      	movs	r2, #6
 80035ae:	f7fc fe1f 	bl	80001f0 <memchr>
 80035b2:	2800      	cmp	r0, #0
 80035b4:	d038      	beq.n	8003628 <_svfiprintf_r+0x1d8>
 80035b6:	4b23      	ldr	r3, [pc, #140]	; (8003644 <_svfiprintf_r+0x1f4>)
 80035b8:	bb1b      	cbnz	r3, 8003602 <_svfiprintf_r+0x1b2>
 80035ba:	9b03      	ldr	r3, [sp, #12]
 80035bc:	3307      	adds	r3, #7
 80035be:	f023 0307 	bic.w	r3, r3, #7
 80035c2:	3308      	adds	r3, #8
 80035c4:	9303      	str	r3, [sp, #12]
 80035c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035c8:	4433      	add	r3, r6
 80035ca:	9309      	str	r3, [sp, #36]	; 0x24
 80035cc:	e767      	b.n	800349e <_svfiprintf_r+0x4e>
 80035ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80035d2:	460c      	mov	r4, r1
 80035d4:	2001      	movs	r0, #1
 80035d6:	e7a5      	b.n	8003524 <_svfiprintf_r+0xd4>
 80035d8:	2300      	movs	r3, #0
 80035da:	3401      	adds	r4, #1
 80035dc:	9305      	str	r3, [sp, #20]
 80035de:	4619      	mov	r1, r3
 80035e0:	f04f 0c0a 	mov.w	ip, #10
 80035e4:	4620      	mov	r0, r4
 80035e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035ea:	3a30      	subs	r2, #48	; 0x30
 80035ec:	2a09      	cmp	r2, #9
 80035ee:	d903      	bls.n	80035f8 <_svfiprintf_r+0x1a8>
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0c5      	beq.n	8003580 <_svfiprintf_r+0x130>
 80035f4:	9105      	str	r1, [sp, #20]
 80035f6:	e7c3      	b.n	8003580 <_svfiprintf_r+0x130>
 80035f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80035fc:	4604      	mov	r4, r0
 80035fe:	2301      	movs	r3, #1
 8003600:	e7f0      	b.n	80035e4 <_svfiprintf_r+0x194>
 8003602:	ab03      	add	r3, sp, #12
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	462a      	mov	r2, r5
 8003608:	4b0f      	ldr	r3, [pc, #60]	; (8003648 <_svfiprintf_r+0x1f8>)
 800360a:	a904      	add	r1, sp, #16
 800360c:	4638      	mov	r0, r7
 800360e:	f3af 8000 	nop.w
 8003612:	1c42      	adds	r2, r0, #1
 8003614:	4606      	mov	r6, r0
 8003616:	d1d6      	bne.n	80035c6 <_svfiprintf_r+0x176>
 8003618:	89ab      	ldrh	r3, [r5, #12]
 800361a:	065b      	lsls	r3, r3, #25
 800361c:	f53f af2c 	bmi.w	8003478 <_svfiprintf_r+0x28>
 8003620:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003622:	b01d      	add	sp, #116	; 0x74
 8003624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003628:	ab03      	add	r3, sp, #12
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	462a      	mov	r2, r5
 800362e:	4b06      	ldr	r3, [pc, #24]	; (8003648 <_svfiprintf_r+0x1f8>)
 8003630:	a904      	add	r1, sp, #16
 8003632:	4638      	mov	r0, r7
 8003634:	f000 f87a 	bl	800372c <_printf_i>
 8003638:	e7eb      	b.n	8003612 <_svfiprintf_r+0x1c2>
 800363a:	bf00      	nop
 800363c:	08003d34 	.word	0x08003d34
 8003640:	08003d3e 	.word	0x08003d3e
 8003644:	00000000 	.word	0x00000000
 8003648:	08003399 	.word	0x08003399
 800364c:	08003d3a 	.word	0x08003d3a

08003650 <_printf_common>:
 8003650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003654:	4616      	mov	r6, r2
 8003656:	4699      	mov	r9, r3
 8003658:	688a      	ldr	r2, [r1, #8]
 800365a:	690b      	ldr	r3, [r1, #16]
 800365c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003660:	4293      	cmp	r3, r2
 8003662:	bfb8      	it	lt
 8003664:	4613      	movlt	r3, r2
 8003666:	6033      	str	r3, [r6, #0]
 8003668:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800366c:	4607      	mov	r7, r0
 800366e:	460c      	mov	r4, r1
 8003670:	b10a      	cbz	r2, 8003676 <_printf_common+0x26>
 8003672:	3301      	adds	r3, #1
 8003674:	6033      	str	r3, [r6, #0]
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	0699      	lsls	r1, r3, #26
 800367a:	bf42      	ittt	mi
 800367c:	6833      	ldrmi	r3, [r6, #0]
 800367e:	3302      	addmi	r3, #2
 8003680:	6033      	strmi	r3, [r6, #0]
 8003682:	6825      	ldr	r5, [r4, #0]
 8003684:	f015 0506 	ands.w	r5, r5, #6
 8003688:	d106      	bne.n	8003698 <_printf_common+0x48>
 800368a:	f104 0a19 	add.w	sl, r4, #25
 800368e:	68e3      	ldr	r3, [r4, #12]
 8003690:	6832      	ldr	r2, [r6, #0]
 8003692:	1a9b      	subs	r3, r3, r2
 8003694:	42ab      	cmp	r3, r5
 8003696:	dc26      	bgt.n	80036e6 <_printf_common+0x96>
 8003698:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800369c:	1e13      	subs	r3, r2, #0
 800369e:	6822      	ldr	r2, [r4, #0]
 80036a0:	bf18      	it	ne
 80036a2:	2301      	movne	r3, #1
 80036a4:	0692      	lsls	r2, r2, #26
 80036a6:	d42b      	bmi.n	8003700 <_printf_common+0xb0>
 80036a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036ac:	4649      	mov	r1, r9
 80036ae:	4638      	mov	r0, r7
 80036b0:	47c0      	blx	r8
 80036b2:	3001      	adds	r0, #1
 80036b4:	d01e      	beq.n	80036f4 <_printf_common+0xa4>
 80036b6:	6823      	ldr	r3, [r4, #0]
 80036b8:	68e5      	ldr	r5, [r4, #12]
 80036ba:	6832      	ldr	r2, [r6, #0]
 80036bc:	f003 0306 	and.w	r3, r3, #6
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	bf08      	it	eq
 80036c4:	1aad      	subeq	r5, r5, r2
 80036c6:	68a3      	ldr	r3, [r4, #8]
 80036c8:	6922      	ldr	r2, [r4, #16]
 80036ca:	bf0c      	ite	eq
 80036cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036d0:	2500      	movne	r5, #0
 80036d2:	4293      	cmp	r3, r2
 80036d4:	bfc4      	itt	gt
 80036d6:	1a9b      	subgt	r3, r3, r2
 80036d8:	18ed      	addgt	r5, r5, r3
 80036da:	2600      	movs	r6, #0
 80036dc:	341a      	adds	r4, #26
 80036de:	42b5      	cmp	r5, r6
 80036e0:	d11a      	bne.n	8003718 <_printf_common+0xc8>
 80036e2:	2000      	movs	r0, #0
 80036e4:	e008      	b.n	80036f8 <_printf_common+0xa8>
 80036e6:	2301      	movs	r3, #1
 80036e8:	4652      	mov	r2, sl
 80036ea:	4649      	mov	r1, r9
 80036ec:	4638      	mov	r0, r7
 80036ee:	47c0      	blx	r8
 80036f0:	3001      	adds	r0, #1
 80036f2:	d103      	bne.n	80036fc <_printf_common+0xac>
 80036f4:	f04f 30ff 	mov.w	r0, #4294967295
 80036f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036fc:	3501      	adds	r5, #1
 80036fe:	e7c6      	b.n	800368e <_printf_common+0x3e>
 8003700:	18e1      	adds	r1, r4, r3
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	2030      	movs	r0, #48	; 0x30
 8003706:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800370a:	4422      	add	r2, r4
 800370c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003710:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003714:	3302      	adds	r3, #2
 8003716:	e7c7      	b.n	80036a8 <_printf_common+0x58>
 8003718:	2301      	movs	r3, #1
 800371a:	4622      	mov	r2, r4
 800371c:	4649      	mov	r1, r9
 800371e:	4638      	mov	r0, r7
 8003720:	47c0      	blx	r8
 8003722:	3001      	adds	r0, #1
 8003724:	d0e6      	beq.n	80036f4 <_printf_common+0xa4>
 8003726:	3601      	adds	r6, #1
 8003728:	e7d9      	b.n	80036de <_printf_common+0x8e>
	...

0800372c <_printf_i>:
 800372c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003730:	7e0f      	ldrb	r7, [r1, #24]
 8003732:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003734:	2f78      	cmp	r7, #120	; 0x78
 8003736:	4691      	mov	r9, r2
 8003738:	4680      	mov	r8, r0
 800373a:	460c      	mov	r4, r1
 800373c:	469a      	mov	sl, r3
 800373e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003742:	d807      	bhi.n	8003754 <_printf_i+0x28>
 8003744:	2f62      	cmp	r7, #98	; 0x62
 8003746:	d80a      	bhi.n	800375e <_printf_i+0x32>
 8003748:	2f00      	cmp	r7, #0
 800374a:	f000 80d8 	beq.w	80038fe <_printf_i+0x1d2>
 800374e:	2f58      	cmp	r7, #88	; 0x58
 8003750:	f000 80a3 	beq.w	800389a <_printf_i+0x16e>
 8003754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003758:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800375c:	e03a      	b.n	80037d4 <_printf_i+0xa8>
 800375e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003762:	2b15      	cmp	r3, #21
 8003764:	d8f6      	bhi.n	8003754 <_printf_i+0x28>
 8003766:	a101      	add	r1, pc, #4	; (adr r1, 800376c <_printf_i+0x40>)
 8003768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800376c:	080037c5 	.word	0x080037c5
 8003770:	080037d9 	.word	0x080037d9
 8003774:	08003755 	.word	0x08003755
 8003778:	08003755 	.word	0x08003755
 800377c:	08003755 	.word	0x08003755
 8003780:	08003755 	.word	0x08003755
 8003784:	080037d9 	.word	0x080037d9
 8003788:	08003755 	.word	0x08003755
 800378c:	08003755 	.word	0x08003755
 8003790:	08003755 	.word	0x08003755
 8003794:	08003755 	.word	0x08003755
 8003798:	080038e5 	.word	0x080038e5
 800379c:	08003809 	.word	0x08003809
 80037a0:	080038c7 	.word	0x080038c7
 80037a4:	08003755 	.word	0x08003755
 80037a8:	08003755 	.word	0x08003755
 80037ac:	08003907 	.word	0x08003907
 80037b0:	08003755 	.word	0x08003755
 80037b4:	08003809 	.word	0x08003809
 80037b8:	08003755 	.word	0x08003755
 80037bc:	08003755 	.word	0x08003755
 80037c0:	080038cf 	.word	0x080038cf
 80037c4:	682b      	ldr	r3, [r5, #0]
 80037c6:	1d1a      	adds	r2, r3, #4
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	602a      	str	r2, [r5, #0]
 80037cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0a3      	b.n	8003920 <_printf_i+0x1f4>
 80037d8:	6820      	ldr	r0, [r4, #0]
 80037da:	6829      	ldr	r1, [r5, #0]
 80037dc:	0606      	lsls	r6, r0, #24
 80037de:	f101 0304 	add.w	r3, r1, #4
 80037e2:	d50a      	bpl.n	80037fa <_printf_i+0xce>
 80037e4:	680e      	ldr	r6, [r1, #0]
 80037e6:	602b      	str	r3, [r5, #0]
 80037e8:	2e00      	cmp	r6, #0
 80037ea:	da03      	bge.n	80037f4 <_printf_i+0xc8>
 80037ec:	232d      	movs	r3, #45	; 0x2d
 80037ee:	4276      	negs	r6, r6
 80037f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037f4:	485e      	ldr	r0, [pc, #376]	; (8003970 <_printf_i+0x244>)
 80037f6:	230a      	movs	r3, #10
 80037f8:	e019      	b.n	800382e <_printf_i+0x102>
 80037fa:	680e      	ldr	r6, [r1, #0]
 80037fc:	602b      	str	r3, [r5, #0]
 80037fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003802:	bf18      	it	ne
 8003804:	b236      	sxthne	r6, r6
 8003806:	e7ef      	b.n	80037e8 <_printf_i+0xbc>
 8003808:	682b      	ldr	r3, [r5, #0]
 800380a:	6820      	ldr	r0, [r4, #0]
 800380c:	1d19      	adds	r1, r3, #4
 800380e:	6029      	str	r1, [r5, #0]
 8003810:	0601      	lsls	r1, r0, #24
 8003812:	d501      	bpl.n	8003818 <_printf_i+0xec>
 8003814:	681e      	ldr	r6, [r3, #0]
 8003816:	e002      	b.n	800381e <_printf_i+0xf2>
 8003818:	0646      	lsls	r6, r0, #25
 800381a:	d5fb      	bpl.n	8003814 <_printf_i+0xe8>
 800381c:	881e      	ldrh	r6, [r3, #0]
 800381e:	4854      	ldr	r0, [pc, #336]	; (8003970 <_printf_i+0x244>)
 8003820:	2f6f      	cmp	r7, #111	; 0x6f
 8003822:	bf0c      	ite	eq
 8003824:	2308      	moveq	r3, #8
 8003826:	230a      	movne	r3, #10
 8003828:	2100      	movs	r1, #0
 800382a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800382e:	6865      	ldr	r5, [r4, #4]
 8003830:	60a5      	str	r5, [r4, #8]
 8003832:	2d00      	cmp	r5, #0
 8003834:	bfa2      	ittt	ge
 8003836:	6821      	ldrge	r1, [r4, #0]
 8003838:	f021 0104 	bicge.w	r1, r1, #4
 800383c:	6021      	strge	r1, [r4, #0]
 800383e:	b90e      	cbnz	r6, 8003844 <_printf_i+0x118>
 8003840:	2d00      	cmp	r5, #0
 8003842:	d04d      	beq.n	80038e0 <_printf_i+0x1b4>
 8003844:	4615      	mov	r5, r2
 8003846:	fbb6 f1f3 	udiv	r1, r6, r3
 800384a:	fb03 6711 	mls	r7, r3, r1, r6
 800384e:	5dc7      	ldrb	r7, [r0, r7]
 8003850:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003854:	4637      	mov	r7, r6
 8003856:	42bb      	cmp	r3, r7
 8003858:	460e      	mov	r6, r1
 800385a:	d9f4      	bls.n	8003846 <_printf_i+0x11a>
 800385c:	2b08      	cmp	r3, #8
 800385e:	d10b      	bne.n	8003878 <_printf_i+0x14c>
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	07de      	lsls	r6, r3, #31
 8003864:	d508      	bpl.n	8003878 <_printf_i+0x14c>
 8003866:	6923      	ldr	r3, [r4, #16]
 8003868:	6861      	ldr	r1, [r4, #4]
 800386a:	4299      	cmp	r1, r3
 800386c:	bfde      	ittt	le
 800386e:	2330      	movle	r3, #48	; 0x30
 8003870:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003874:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003878:	1b52      	subs	r2, r2, r5
 800387a:	6122      	str	r2, [r4, #16]
 800387c:	f8cd a000 	str.w	sl, [sp]
 8003880:	464b      	mov	r3, r9
 8003882:	aa03      	add	r2, sp, #12
 8003884:	4621      	mov	r1, r4
 8003886:	4640      	mov	r0, r8
 8003888:	f7ff fee2 	bl	8003650 <_printf_common>
 800388c:	3001      	adds	r0, #1
 800388e:	d14c      	bne.n	800392a <_printf_i+0x1fe>
 8003890:	f04f 30ff 	mov.w	r0, #4294967295
 8003894:	b004      	add	sp, #16
 8003896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800389a:	4835      	ldr	r0, [pc, #212]	; (8003970 <_printf_i+0x244>)
 800389c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80038a0:	6829      	ldr	r1, [r5, #0]
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80038a8:	6029      	str	r1, [r5, #0]
 80038aa:	061d      	lsls	r5, r3, #24
 80038ac:	d514      	bpl.n	80038d8 <_printf_i+0x1ac>
 80038ae:	07df      	lsls	r7, r3, #31
 80038b0:	bf44      	itt	mi
 80038b2:	f043 0320 	orrmi.w	r3, r3, #32
 80038b6:	6023      	strmi	r3, [r4, #0]
 80038b8:	b91e      	cbnz	r6, 80038c2 <_printf_i+0x196>
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	f023 0320 	bic.w	r3, r3, #32
 80038c0:	6023      	str	r3, [r4, #0]
 80038c2:	2310      	movs	r3, #16
 80038c4:	e7b0      	b.n	8003828 <_printf_i+0xfc>
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	f043 0320 	orr.w	r3, r3, #32
 80038cc:	6023      	str	r3, [r4, #0]
 80038ce:	2378      	movs	r3, #120	; 0x78
 80038d0:	4828      	ldr	r0, [pc, #160]	; (8003974 <_printf_i+0x248>)
 80038d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038d6:	e7e3      	b.n	80038a0 <_printf_i+0x174>
 80038d8:	0659      	lsls	r1, r3, #25
 80038da:	bf48      	it	mi
 80038dc:	b2b6      	uxthmi	r6, r6
 80038de:	e7e6      	b.n	80038ae <_printf_i+0x182>
 80038e0:	4615      	mov	r5, r2
 80038e2:	e7bb      	b.n	800385c <_printf_i+0x130>
 80038e4:	682b      	ldr	r3, [r5, #0]
 80038e6:	6826      	ldr	r6, [r4, #0]
 80038e8:	6961      	ldr	r1, [r4, #20]
 80038ea:	1d18      	adds	r0, r3, #4
 80038ec:	6028      	str	r0, [r5, #0]
 80038ee:	0635      	lsls	r5, r6, #24
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	d501      	bpl.n	80038f8 <_printf_i+0x1cc>
 80038f4:	6019      	str	r1, [r3, #0]
 80038f6:	e002      	b.n	80038fe <_printf_i+0x1d2>
 80038f8:	0670      	lsls	r0, r6, #25
 80038fa:	d5fb      	bpl.n	80038f4 <_printf_i+0x1c8>
 80038fc:	8019      	strh	r1, [r3, #0]
 80038fe:	2300      	movs	r3, #0
 8003900:	6123      	str	r3, [r4, #16]
 8003902:	4615      	mov	r5, r2
 8003904:	e7ba      	b.n	800387c <_printf_i+0x150>
 8003906:	682b      	ldr	r3, [r5, #0]
 8003908:	1d1a      	adds	r2, r3, #4
 800390a:	602a      	str	r2, [r5, #0]
 800390c:	681d      	ldr	r5, [r3, #0]
 800390e:	6862      	ldr	r2, [r4, #4]
 8003910:	2100      	movs	r1, #0
 8003912:	4628      	mov	r0, r5
 8003914:	f7fc fc6c 	bl	80001f0 <memchr>
 8003918:	b108      	cbz	r0, 800391e <_printf_i+0x1f2>
 800391a:	1b40      	subs	r0, r0, r5
 800391c:	6060      	str	r0, [r4, #4]
 800391e:	6863      	ldr	r3, [r4, #4]
 8003920:	6123      	str	r3, [r4, #16]
 8003922:	2300      	movs	r3, #0
 8003924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003928:	e7a8      	b.n	800387c <_printf_i+0x150>
 800392a:	6923      	ldr	r3, [r4, #16]
 800392c:	462a      	mov	r2, r5
 800392e:	4649      	mov	r1, r9
 8003930:	4640      	mov	r0, r8
 8003932:	47d0      	blx	sl
 8003934:	3001      	adds	r0, #1
 8003936:	d0ab      	beq.n	8003890 <_printf_i+0x164>
 8003938:	6823      	ldr	r3, [r4, #0]
 800393a:	079b      	lsls	r3, r3, #30
 800393c:	d413      	bmi.n	8003966 <_printf_i+0x23a>
 800393e:	68e0      	ldr	r0, [r4, #12]
 8003940:	9b03      	ldr	r3, [sp, #12]
 8003942:	4298      	cmp	r0, r3
 8003944:	bfb8      	it	lt
 8003946:	4618      	movlt	r0, r3
 8003948:	e7a4      	b.n	8003894 <_printf_i+0x168>
 800394a:	2301      	movs	r3, #1
 800394c:	4632      	mov	r2, r6
 800394e:	4649      	mov	r1, r9
 8003950:	4640      	mov	r0, r8
 8003952:	47d0      	blx	sl
 8003954:	3001      	adds	r0, #1
 8003956:	d09b      	beq.n	8003890 <_printf_i+0x164>
 8003958:	3501      	adds	r5, #1
 800395a:	68e3      	ldr	r3, [r4, #12]
 800395c:	9903      	ldr	r1, [sp, #12]
 800395e:	1a5b      	subs	r3, r3, r1
 8003960:	42ab      	cmp	r3, r5
 8003962:	dcf2      	bgt.n	800394a <_printf_i+0x21e>
 8003964:	e7eb      	b.n	800393e <_printf_i+0x212>
 8003966:	2500      	movs	r5, #0
 8003968:	f104 0619 	add.w	r6, r4, #25
 800396c:	e7f5      	b.n	800395a <_printf_i+0x22e>
 800396e:	bf00      	nop
 8003970:	08003d45 	.word	0x08003d45
 8003974:	08003d56 	.word	0x08003d56

08003978 <memcpy>:
 8003978:	440a      	add	r2, r1
 800397a:	4291      	cmp	r1, r2
 800397c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003980:	d100      	bne.n	8003984 <memcpy+0xc>
 8003982:	4770      	bx	lr
 8003984:	b510      	push	{r4, lr}
 8003986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800398a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800398e:	4291      	cmp	r1, r2
 8003990:	d1f9      	bne.n	8003986 <memcpy+0xe>
 8003992:	bd10      	pop	{r4, pc}

08003994 <memmove>:
 8003994:	4288      	cmp	r0, r1
 8003996:	b510      	push	{r4, lr}
 8003998:	eb01 0402 	add.w	r4, r1, r2
 800399c:	d902      	bls.n	80039a4 <memmove+0x10>
 800399e:	4284      	cmp	r4, r0
 80039a0:	4623      	mov	r3, r4
 80039a2:	d807      	bhi.n	80039b4 <memmove+0x20>
 80039a4:	1e43      	subs	r3, r0, #1
 80039a6:	42a1      	cmp	r1, r4
 80039a8:	d008      	beq.n	80039bc <memmove+0x28>
 80039aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039b2:	e7f8      	b.n	80039a6 <memmove+0x12>
 80039b4:	4402      	add	r2, r0
 80039b6:	4601      	mov	r1, r0
 80039b8:	428a      	cmp	r2, r1
 80039ba:	d100      	bne.n	80039be <memmove+0x2a>
 80039bc:	bd10      	pop	{r4, pc}
 80039be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039c6:	e7f7      	b.n	80039b8 <memmove+0x24>

080039c8 <_free_r>:
 80039c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039ca:	2900      	cmp	r1, #0
 80039cc:	d044      	beq.n	8003a58 <_free_r+0x90>
 80039ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039d2:	9001      	str	r0, [sp, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f1a1 0404 	sub.w	r4, r1, #4
 80039da:	bfb8      	it	lt
 80039dc:	18e4      	addlt	r4, r4, r3
 80039de:	f000 f913 	bl	8003c08 <__malloc_lock>
 80039e2:	4a1e      	ldr	r2, [pc, #120]	; (8003a5c <_free_r+0x94>)
 80039e4:	9801      	ldr	r0, [sp, #4]
 80039e6:	6813      	ldr	r3, [r2, #0]
 80039e8:	b933      	cbnz	r3, 80039f8 <_free_r+0x30>
 80039ea:	6063      	str	r3, [r4, #4]
 80039ec:	6014      	str	r4, [r2, #0]
 80039ee:	b003      	add	sp, #12
 80039f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039f4:	f000 b90e 	b.w	8003c14 <__malloc_unlock>
 80039f8:	42a3      	cmp	r3, r4
 80039fa:	d908      	bls.n	8003a0e <_free_r+0x46>
 80039fc:	6825      	ldr	r5, [r4, #0]
 80039fe:	1961      	adds	r1, r4, r5
 8003a00:	428b      	cmp	r3, r1
 8003a02:	bf01      	itttt	eq
 8003a04:	6819      	ldreq	r1, [r3, #0]
 8003a06:	685b      	ldreq	r3, [r3, #4]
 8003a08:	1949      	addeq	r1, r1, r5
 8003a0a:	6021      	streq	r1, [r4, #0]
 8003a0c:	e7ed      	b.n	80039ea <_free_r+0x22>
 8003a0e:	461a      	mov	r2, r3
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	b10b      	cbz	r3, 8003a18 <_free_r+0x50>
 8003a14:	42a3      	cmp	r3, r4
 8003a16:	d9fa      	bls.n	8003a0e <_free_r+0x46>
 8003a18:	6811      	ldr	r1, [r2, #0]
 8003a1a:	1855      	adds	r5, r2, r1
 8003a1c:	42a5      	cmp	r5, r4
 8003a1e:	d10b      	bne.n	8003a38 <_free_r+0x70>
 8003a20:	6824      	ldr	r4, [r4, #0]
 8003a22:	4421      	add	r1, r4
 8003a24:	1854      	adds	r4, r2, r1
 8003a26:	42a3      	cmp	r3, r4
 8003a28:	6011      	str	r1, [r2, #0]
 8003a2a:	d1e0      	bne.n	80039ee <_free_r+0x26>
 8003a2c:	681c      	ldr	r4, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	6053      	str	r3, [r2, #4]
 8003a32:	4421      	add	r1, r4
 8003a34:	6011      	str	r1, [r2, #0]
 8003a36:	e7da      	b.n	80039ee <_free_r+0x26>
 8003a38:	d902      	bls.n	8003a40 <_free_r+0x78>
 8003a3a:	230c      	movs	r3, #12
 8003a3c:	6003      	str	r3, [r0, #0]
 8003a3e:	e7d6      	b.n	80039ee <_free_r+0x26>
 8003a40:	6825      	ldr	r5, [r4, #0]
 8003a42:	1961      	adds	r1, r4, r5
 8003a44:	428b      	cmp	r3, r1
 8003a46:	bf04      	itt	eq
 8003a48:	6819      	ldreq	r1, [r3, #0]
 8003a4a:	685b      	ldreq	r3, [r3, #4]
 8003a4c:	6063      	str	r3, [r4, #4]
 8003a4e:	bf04      	itt	eq
 8003a50:	1949      	addeq	r1, r1, r5
 8003a52:	6021      	streq	r1, [r4, #0]
 8003a54:	6054      	str	r4, [r2, #4]
 8003a56:	e7ca      	b.n	80039ee <_free_r+0x26>
 8003a58:	b003      	add	sp, #12
 8003a5a:	bd30      	pop	{r4, r5, pc}
 8003a5c:	20000204 	.word	0x20000204

08003a60 <sbrk_aligned>:
 8003a60:	b570      	push	{r4, r5, r6, lr}
 8003a62:	4e0e      	ldr	r6, [pc, #56]	; (8003a9c <sbrk_aligned+0x3c>)
 8003a64:	460c      	mov	r4, r1
 8003a66:	6831      	ldr	r1, [r6, #0]
 8003a68:	4605      	mov	r5, r0
 8003a6a:	b911      	cbnz	r1, 8003a72 <sbrk_aligned+0x12>
 8003a6c:	f000 f8bc 	bl	8003be8 <_sbrk_r>
 8003a70:	6030      	str	r0, [r6, #0]
 8003a72:	4621      	mov	r1, r4
 8003a74:	4628      	mov	r0, r5
 8003a76:	f000 f8b7 	bl	8003be8 <_sbrk_r>
 8003a7a:	1c43      	adds	r3, r0, #1
 8003a7c:	d00a      	beq.n	8003a94 <sbrk_aligned+0x34>
 8003a7e:	1cc4      	adds	r4, r0, #3
 8003a80:	f024 0403 	bic.w	r4, r4, #3
 8003a84:	42a0      	cmp	r0, r4
 8003a86:	d007      	beq.n	8003a98 <sbrk_aligned+0x38>
 8003a88:	1a21      	subs	r1, r4, r0
 8003a8a:	4628      	mov	r0, r5
 8003a8c:	f000 f8ac 	bl	8003be8 <_sbrk_r>
 8003a90:	3001      	adds	r0, #1
 8003a92:	d101      	bne.n	8003a98 <sbrk_aligned+0x38>
 8003a94:	f04f 34ff 	mov.w	r4, #4294967295
 8003a98:	4620      	mov	r0, r4
 8003a9a:	bd70      	pop	{r4, r5, r6, pc}
 8003a9c:	20000208 	.word	0x20000208

08003aa0 <_malloc_r>:
 8003aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa4:	1ccd      	adds	r5, r1, #3
 8003aa6:	f025 0503 	bic.w	r5, r5, #3
 8003aaa:	3508      	adds	r5, #8
 8003aac:	2d0c      	cmp	r5, #12
 8003aae:	bf38      	it	cc
 8003ab0:	250c      	movcc	r5, #12
 8003ab2:	2d00      	cmp	r5, #0
 8003ab4:	4607      	mov	r7, r0
 8003ab6:	db01      	blt.n	8003abc <_malloc_r+0x1c>
 8003ab8:	42a9      	cmp	r1, r5
 8003aba:	d905      	bls.n	8003ac8 <_malloc_r+0x28>
 8003abc:	230c      	movs	r3, #12
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	2600      	movs	r6, #0
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ac8:	4e2e      	ldr	r6, [pc, #184]	; (8003b84 <_malloc_r+0xe4>)
 8003aca:	f000 f89d 	bl	8003c08 <__malloc_lock>
 8003ace:	6833      	ldr	r3, [r6, #0]
 8003ad0:	461c      	mov	r4, r3
 8003ad2:	bb34      	cbnz	r4, 8003b22 <_malloc_r+0x82>
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	4638      	mov	r0, r7
 8003ad8:	f7ff ffc2 	bl	8003a60 <sbrk_aligned>
 8003adc:	1c43      	adds	r3, r0, #1
 8003ade:	4604      	mov	r4, r0
 8003ae0:	d14d      	bne.n	8003b7e <_malloc_r+0xde>
 8003ae2:	6834      	ldr	r4, [r6, #0]
 8003ae4:	4626      	mov	r6, r4
 8003ae6:	2e00      	cmp	r6, #0
 8003ae8:	d140      	bne.n	8003b6c <_malloc_r+0xcc>
 8003aea:	6823      	ldr	r3, [r4, #0]
 8003aec:	4631      	mov	r1, r6
 8003aee:	4638      	mov	r0, r7
 8003af0:	eb04 0803 	add.w	r8, r4, r3
 8003af4:	f000 f878 	bl	8003be8 <_sbrk_r>
 8003af8:	4580      	cmp	r8, r0
 8003afa:	d13a      	bne.n	8003b72 <_malloc_r+0xd2>
 8003afc:	6821      	ldr	r1, [r4, #0]
 8003afe:	3503      	adds	r5, #3
 8003b00:	1a6d      	subs	r5, r5, r1
 8003b02:	f025 0503 	bic.w	r5, r5, #3
 8003b06:	3508      	adds	r5, #8
 8003b08:	2d0c      	cmp	r5, #12
 8003b0a:	bf38      	it	cc
 8003b0c:	250c      	movcc	r5, #12
 8003b0e:	4629      	mov	r1, r5
 8003b10:	4638      	mov	r0, r7
 8003b12:	f7ff ffa5 	bl	8003a60 <sbrk_aligned>
 8003b16:	3001      	adds	r0, #1
 8003b18:	d02b      	beq.n	8003b72 <_malloc_r+0xd2>
 8003b1a:	6823      	ldr	r3, [r4, #0]
 8003b1c:	442b      	add	r3, r5
 8003b1e:	6023      	str	r3, [r4, #0]
 8003b20:	e00e      	b.n	8003b40 <_malloc_r+0xa0>
 8003b22:	6822      	ldr	r2, [r4, #0]
 8003b24:	1b52      	subs	r2, r2, r5
 8003b26:	d41e      	bmi.n	8003b66 <_malloc_r+0xc6>
 8003b28:	2a0b      	cmp	r2, #11
 8003b2a:	d916      	bls.n	8003b5a <_malloc_r+0xba>
 8003b2c:	1961      	adds	r1, r4, r5
 8003b2e:	42a3      	cmp	r3, r4
 8003b30:	6025      	str	r5, [r4, #0]
 8003b32:	bf18      	it	ne
 8003b34:	6059      	strne	r1, [r3, #4]
 8003b36:	6863      	ldr	r3, [r4, #4]
 8003b38:	bf08      	it	eq
 8003b3a:	6031      	streq	r1, [r6, #0]
 8003b3c:	5162      	str	r2, [r4, r5]
 8003b3e:	604b      	str	r3, [r1, #4]
 8003b40:	4638      	mov	r0, r7
 8003b42:	f104 060b 	add.w	r6, r4, #11
 8003b46:	f000 f865 	bl	8003c14 <__malloc_unlock>
 8003b4a:	f026 0607 	bic.w	r6, r6, #7
 8003b4e:	1d23      	adds	r3, r4, #4
 8003b50:	1af2      	subs	r2, r6, r3
 8003b52:	d0b6      	beq.n	8003ac2 <_malloc_r+0x22>
 8003b54:	1b9b      	subs	r3, r3, r6
 8003b56:	50a3      	str	r3, [r4, r2]
 8003b58:	e7b3      	b.n	8003ac2 <_malloc_r+0x22>
 8003b5a:	6862      	ldr	r2, [r4, #4]
 8003b5c:	42a3      	cmp	r3, r4
 8003b5e:	bf0c      	ite	eq
 8003b60:	6032      	streq	r2, [r6, #0]
 8003b62:	605a      	strne	r2, [r3, #4]
 8003b64:	e7ec      	b.n	8003b40 <_malloc_r+0xa0>
 8003b66:	4623      	mov	r3, r4
 8003b68:	6864      	ldr	r4, [r4, #4]
 8003b6a:	e7b2      	b.n	8003ad2 <_malloc_r+0x32>
 8003b6c:	4634      	mov	r4, r6
 8003b6e:	6876      	ldr	r6, [r6, #4]
 8003b70:	e7b9      	b.n	8003ae6 <_malloc_r+0x46>
 8003b72:	230c      	movs	r3, #12
 8003b74:	603b      	str	r3, [r7, #0]
 8003b76:	4638      	mov	r0, r7
 8003b78:	f000 f84c 	bl	8003c14 <__malloc_unlock>
 8003b7c:	e7a1      	b.n	8003ac2 <_malloc_r+0x22>
 8003b7e:	6025      	str	r5, [r4, #0]
 8003b80:	e7de      	b.n	8003b40 <_malloc_r+0xa0>
 8003b82:	bf00      	nop
 8003b84:	20000204 	.word	0x20000204

08003b88 <_realloc_r>:
 8003b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b8c:	4680      	mov	r8, r0
 8003b8e:	4614      	mov	r4, r2
 8003b90:	460e      	mov	r6, r1
 8003b92:	b921      	cbnz	r1, 8003b9e <_realloc_r+0x16>
 8003b94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b98:	4611      	mov	r1, r2
 8003b9a:	f7ff bf81 	b.w	8003aa0 <_malloc_r>
 8003b9e:	b92a      	cbnz	r2, 8003bac <_realloc_r+0x24>
 8003ba0:	f7ff ff12 	bl	80039c8 <_free_r>
 8003ba4:	4625      	mov	r5, r4
 8003ba6:	4628      	mov	r0, r5
 8003ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bac:	f000 f838 	bl	8003c20 <_malloc_usable_size_r>
 8003bb0:	4284      	cmp	r4, r0
 8003bb2:	4607      	mov	r7, r0
 8003bb4:	d802      	bhi.n	8003bbc <_realloc_r+0x34>
 8003bb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003bba:	d812      	bhi.n	8003be2 <_realloc_r+0x5a>
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	4640      	mov	r0, r8
 8003bc0:	f7ff ff6e 	bl	8003aa0 <_malloc_r>
 8003bc4:	4605      	mov	r5, r0
 8003bc6:	2800      	cmp	r0, #0
 8003bc8:	d0ed      	beq.n	8003ba6 <_realloc_r+0x1e>
 8003bca:	42bc      	cmp	r4, r7
 8003bcc:	4622      	mov	r2, r4
 8003bce:	4631      	mov	r1, r6
 8003bd0:	bf28      	it	cs
 8003bd2:	463a      	movcs	r2, r7
 8003bd4:	f7ff fed0 	bl	8003978 <memcpy>
 8003bd8:	4631      	mov	r1, r6
 8003bda:	4640      	mov	r0, r8
 8003bdc:	f7ff fef4 	bl	80039c8 <_free_r>
 8003be0:	e7e1      	b.n	8003ba6 <_realloc_r+0x1e>
 8003be2:	4635      	mov	r5, r6
 8003be4:	e7df      	b.n	8003ba6 <_realloc_r+0x1e>
	...

08003be8 <_sbrk_r>:
 8003be8:	b538      	push	{r3, r4, r5, lr}
 8003bea:	4d06      	ldr	r5, [pc, #24]	; (8003c04 <_sbrk_r+0x1c>)
 8003bec:	2300      	movs	r3, #0
 8003bee:	4604      	mov	r4, r0
 8003bf0:	4608      	mov	r0, r1
 8003bf2:	602b      	str	r3, [r5, #0]
 8003bf4:	f7fd f98e 	bl	8000f14 <_sbrk>
 8003bf8:	1c43      	adds	r3, r0, #1
 8003bfa:	d102      	bne.n	8003c02 <_sbrk_r+0x1a>
 8003bfc:	682b      	ldr	r3, [r5, #0]
 8003bfe:	b103      	cbz	r3, 8003c02 <_sbrk_r+0x1a>
 8003c00:	6023      	str	r3, [r4, #0]
 8003c02:	bd38      	pop	{r3, r4, r5, pc}
 8003c04:	2000020c 	.word	0x2000020c

08003c08 <__malloc_lock>:
 8003c08:	4801      	ldr	r0, [pc, #4]	; (8003c10 <__malloc_lock+0x8>)
 8003c0a:	f000 b811 	b.w	8003c30 <__retarget_lock_acquire_recursive>
 8003c0e:	bf00      	nop
 8003c10:	20000210 	.word	0x20000210

08003c14 <__malloc_unlock>:
 8003c14:	4801      	ldr	r0, [pc, #4]	; (8003c1c <__malloc_unlock+0x8>)
 8003c16:	f000 b80c 	b.w	8003c32 <__retarget_lock_release_recursive>
 8003c1a:	bf00      	nop
 8003c1c:	20000210 	.word	0x20000210

08003c20 <_malloc_usable_size_r>:
 8003c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c24:	1f18      	subs	r0, r3, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	bfbc      	itt	lt
 8003c2a:	580b      	ldrlt	r3, [r1, r0]
 8003c2c:	18c0      	addlt	r0, r0, r3
 8003c2e:	4770      	bx	lr

08003c30 <__retarget_lock_acquire_recursive>:
 8003c30:	4770      	bx	lr

08003c32 <__retarget_lock_release_recursive>:
 8003c32:	4770      	bx	lr

08003c34 <_init>:
 8003c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c36:	bf00      	nop
 8003c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3a:	bc08      	pop	{r3}
 8003c3c:	469e      	mov	lr, r3
 8003c3e:	4770      	bx	lr

08003c40 <_fini>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	bf00      	nop
 8003c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c46:	bc08      	pop	{r3}
 8003c48:	469e      	mov	lr, r3
 8003c4a:	4770      	bx	lr
